//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public class JSON2ApexV3 {

	public class Formerly_known_as {
		public String former_name {get;set;} 
		public String year {get;set;} 

		public Formerly_known_as(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'former_name') {
							former_name = parser.getText();
						} else if (text == 'year') {
							year = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Formerly_known_as consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Officers_directors_key_employees {
		public String name {get;set;} 
		public String title {get;set;} 
		public List<String> type_Z {get;set;} // in json: type
		public Double compensation {get;set;} 
		public Double related_compensation {get;set;} 
		public Double other_compensation {get;set;} 
		public String hours {get;set;} 
		public String benefits {get;set;} 

		public Officers_directors_key_employees(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'name') {
							name = parser.getText();
						} else if (text == 'title') {
							title = parser.getText();
						} else if (text == 'type') {
							type_Z = arrayOfString(parser);
						} else if (text == 'compensation') {
							compensation = parser.getDoubleValue();
						} else if (text == 'related_compensation') {
							related_compensation = parser.getDoubleValue();
						} else if (text == 'other_compensation') {
							other_compensation = parser.getDoubleValue();
						} else if (text == 'hours') {
							hours = parser.getText();
						} else if (text == 'benefits') {
							benefits = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Officers_directors_key_employees consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Annual_reports {
		public String doc_name {get;set;} 
		public String contents {get;set;} 
		public String year {get;set;} 
		public String url {get;set;} 

		public Annual_reports(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'doc_name') {
							doc_name = parser.getText();
						} else if (text == 'contents') {
							contents = parser.getText();
						} else if (text == 'year') {
							year = parser.getText();
						} else if (text == 'url') {
							url = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Annual_reports consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Telephone_numbers {
		public String telephone_number {get;set;} 
		public String telephone_type {get;set;} 

		public Telephone_numbers(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'telephone_number') {
							telephone_number = parser.getText();
						} else if (text == 'telephone_type') {
							telephone_type = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Telephone_numbers consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Addresses {
		public String address_line_1 {get;set;} 
		public String address_line_2 {get;set;} 
		public String city {get;set;} 
		public String state {get;set;} 
		public String postal_code {get;set;} 
		public String country {get;set;} 
		public String address_type {get;set;} 

		public Addresses(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'address_line_1') {
							address_line_1 = parser.getText();
						} else if (text == 'address_line_2') {
							address_line_2 = parser.getText();
						} else if (text == 'city') {
							city = parser.getText();
						} else if (text == 'state') {
							state = parser.getText();
						} else if (text == 'postal_code') {
							postal_code = parser.getText();
						} else if (text == 'country') {
							country = parser.getText();
						} else if (text == 'address_type') {
							address_type = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Addresses consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Letters_of_determination {
		public String letter_of_determination_doc_name {get;set;} 
		public String letter_of_determination_url {get;set;} 

		public Letters_of_determination(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'letter_of_determination_doc_name') {
							letter_of_determination_doc_name = parser.getText();
						} else if (text == 'letter_of_determination_url') {
							letter_of_determination_url = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Letters_of_determination consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Charitycheck {
		public String organization_id {get;set;} 
		public String organization_info_last_modified {get;set;} 
		public String ein {get;set;} 
		public String organization_name {get;set;} 
		public String organization_name_aka {get;set;} 
		public String address_line1 {get;set;} 
		public String address_line2 {get;set;} 
		public String city {get;set;} 
		public String state {get;set;} 
		public String state_name {get;set;} 
		public String zip {get;set;} 
		public String filing_req_code {get;set;} 
		public String charity_check_last_modified {get;set;} 
		public String pub78_church_message {get;set;} 
		public String pub78_organization_name {get;set;} 
		public String pub78_ein {get;set;} 
		public String pub78_verified {get;set;} 
		public String pub78_city {get;set;} 
		public String pub78_state {get;set;} 
		public String pub78_indicator {get;set;} 
		public List<Organization_types> organization_types {get;set;} 
		public String most_recent_pub78 {get;set;} 
		public String most_recent_irb {get;set;} 
		public String bmf_church_message {get;set;} 
		public String bmf_organization_name {get;set;} 
		public String bmf_ein {get;set;} 
		public String bmf_status {get;set;} 
		public String most_recent_bmf {get;set;} 
		public String bmf_subsection {get;set;} 
		public String subsection_description {get;set;} 
		public String foundation_code {get;set;} 
		public String foundation_code_description {get;set;} 
		public String ruling_month {get;set;} 
		public String ruling_year {get;set;} 
		public String adv_ruling_month {get;set;} 
		public String adv_ruling_year {get;set;} 
		public String group_exemption {get;set;} 
		public String exempt_status_code {get;set;} 
		public String ofac_status {get;set;} 
		public String revocation_code {get;set;} 
		public String revocation_date {get;set;} 
		public String reinstatement_date {get;set;} 
		public String irs_bmf_pub78_conflict {get;set;} 
		public String foundation_509a_status {get;set;} 
		public String irb_organization_id {get;set;} 
		public String bulletin_number {get;set;} 
		public String bulletin_url {get;set;} 
		public String effective_date {get;set;} 
		public String irb_last_modified {get;set;} 
		public String report_date {get;set;} 
		public String foundation_type_code {get;set;} 
		public String foundation_type_description {get;set;} 
		public List<Parent_organizations> parent_organizations {get;set;} 

		public Charitycheck(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'organization_id') {
							organization_id = parser.getText();
						} else if (text == 'organization_info_last_modified') {
							organization_info_last_modified = parser.getText();
						} else if (text == 'ein') {
							ein = parser.getText();
						} else if (text == 'organization_name') {
							organization_name = parser.getText();
						} else if (text == 'organization_name_aka') {
							organization_name_aka = parser.getText();
						} else if (text == 'address_line1') {
							address_line1 = parser.getText();
						} else if (text == 'address_line2') {
							address_line2 = parser.getText();
						} else if (text == 'city') {
							city = parser.getText();
						} else if (text == 'state') {
							state = parser.getText();
						} else if (text == 'state_name') {
							state_name = parser.getText();
						} else if (text == 'zip') {
							zip = parser.getText();
						} else if (text == 'filing_req_code') {
							filing_req_code = parser.getText();
						} else if (text == 'charity_check_last_modified') {
							charity_check_last_modified = parser.getText();
						} else if (text == 'pub78_church_message') {
							pub78_church_message = parser.getText();
						} else if (text == 'pub78_organization_name') {
							pub78_organization_name = parser.getText();
						} else if (text == 'pub78_ein') {
							pub78_ein = parser.getText();
						} else if (text == 'pub78_verified') {
							pub78_verified = parser.getText();
						} else if (text == 'pub78_city') {
							pub78_city = parser.getText();
						} else if (text == 'pub78_state') {
							pub78_state = parser.getText();
						} else if (text == 'pub78_indicator') {
							pub78_indicator = parser.getText();
						} else if (text == 'organization_types') {
							organization_types = arrayOfOrganization_types(parser);
						} else if (text == 'most_recent_pub78') {
							most_recent_pub78 = parser.getText();
						} else if (text == 'most_recent_irb') {
							most_recent_irb = parser.getText();
						} else if (text == 'bmf_church_message') {
							bmf_church_message = parser.getText();
						} else if (text == 'bmf_organization_name') {
							bmf_organization_name = parser.getText();
						} else if (text == 'bmf_ein') {
							bmf_ein = parser.getText();
						} else if (text == 'bmf_status') {
							bmf_status = parser.getText();
						} else if (text == 'most_recent_bmf') {
							most_recent_bmf = parser.getText();
						} else if (text == 'bmf_subsection') {
							bmf_subsection = parser.getText();
						} else if (text == 'subsection_description') {
							subsection_description = parser.getText();
						} else if (text == 'foundation_code') {
							foundation_code = parser.getText();
						} else if (text == 'foundation_code_description') {
							foundation_code_description = parser.getText();
						} else if (text == 'ruling_month') {
							ruling_month = parser.getText();
						} else if (text == 'ruling_year') {
							ruling_year = parser.getText();
						} else if (text == 'adv_ruling_month') {
							adv_ruling_month = parser.getText();
						} else if (text == 'adv_ruling_year') {
							adv_ruling_year = parser.getText();
						} else if (text == 'group_exemption') {
							group_exemption = parser.getText();
						} else if (text == 'exempt_status_code') {
							exempt_status_code = parser.getText();
						} else if (text == 'ofac_status') {
							ofac_status = parser.getText();
						} else if (text == 'revocation_code') {
							revocation_code = parser.getText();
						} else if (text == 'revocation_date') {
							revocation_date = parser.getText();
						} else if (text == 'reinstatement_date') {
							reinstatement_date = parser.getText();
						} else if (text == 'irs_bmf_pub78_conflict') {
							irs_bmf_pub78_conflict = parser.getText();
						} else if (text == 'foundation_509a_status') {
							foundation_509a_status = parser.getText();
						} else if (text == 'irb_organization_id') {
							irb_organization_id = parser.getText();
						} else if (text == 'bulletin_number') {
							bulletin_number = parser.getText();
						} else if (text == 'bulletin_url') {
							bulletin_url = parser.getText();
						} else if (text == 'effective_date') {
							effective_date = parser.getText();
						} else if (text == 'irb_last_modified') {
							irb_last_modified = parser.getText();
						} else if (text == 'report_date') {
							report_date = parser.getText();
						} else if (text == 'foundation_type_code') {
							foundation_type_code = parser.getText();
						} else if (text == 'foundation_type_description') {
							foundation_type_description = parser.getText();
						} else if (text == 'parent_organizations') {
							parent_organizations = arrayOfParent_organizations(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Charitycheck consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Expense_composition {
		public Double total_expenses_before_depreciation {get;set;} 
		public String total_expenses_percent_change_over_prior_year {get;set;} 
		public String personnel {get;set;} 
		public String professional_fees {get;set;} 
		public String occupancy {get;set;} 
		public String interest_expense {get;set;} 
		public String pass_through {get;set;} 
		public String all_other_expenses {get;set;} 

		public Expense_composition(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'total_expenses_before_depreciation') {
							total_expenses_before_depreciation = parser.getDoubleValue();
						} else if (text == 'total_expenses_percent_change_over_prior_year') {
							total_expenses_percent_change_over_prior_year = parser.getText();
						} else if (text == 'personnel') {
							personnel = parser.getText();
						} else if (text == 'professional_fees') {
							professional_fees = parser.getText();
						} else if (text == 'occupancy') {
							occupancy = parser.getText();
						} else if (text == 'interest_expense') {
							interest_expense = parser.getText();
						} else if (text == 'pass_through') {
							pass_through = parser.getText();
						} else if (text == 'all_other_expenses') {
							all_other_expenses = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Expense_composition consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Letters_of_dissolution {
		public String name {get;set;} 
		public String year {get;set;} 
		public String letter_of_dissolution_url {get;set;} 

		public Letters_of_dissolution(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'name') {
							name = parser.getText();
						} else if (text == 'year') {
							year = parser.getText();
						} else if (text == 'letter_of_dissolution_url') {
							letter_of_dissolution_url = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Letters_of_dissolution consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Sdg {
		public Integer id {get;set;} 
		public String description {get;set;} 

		public Sdg(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'id') {
							id = parser.getIntegerValue();
						} else if (text == 'description') {
							description = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Sdg consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Accreditations {
		public String accreditation {get;set;} 
		public String year {get;set;} 

		public Accreditations(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'accreditation') {
							accreditation = parser.getText();
						} else if (text == 'year') {
							year = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Accreditations consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Operations {
		public String leader_name {get;set;} 
		public String leader_profile {get;set;} 
		public String co_leader_name {get;set;} 
		public String co_leader_profile {get;set;} 
		public Integer no_of_employees {get;set;} 
		public Integer no_of_volunteers {get;set;} 
		public String organization_email {get;set;} 
		public Integer organization_details_year {get;set;} 
		public List<Officers_directors_key_employees> officers_directors_key_employees {get;set;} 
		public List<Officers_directors_key_employees> highest_paid_employees {get;set;} 
		public Integer employees_greater_than_100K {get;set;} 
		public String board_chair_name {get;set;} 
		public String board_chair_affiliation {get;set;} 
		public String board_chair_term_start {get;set;} 
		public String board_chair_term_end {get;set;} 
		public String board_co_chair_name {get;set;} 
		public String board_co_chair_affiliation {get;set;} 
		public String board_co_chair_term_start {get;set;} 
		public String board_co_chair_term_end {get;set;} 
		public List<Board_of_directors> board_of_directors {get;set;} 
		public List<Charting_impact_answers> board_leadership_practices {get;set;} 
		public Organization_demographics organization_demographics {get;set;} 
		public Demographics demographics {get;set;} 
		public List<Contractors> contractors {get;set;} 
		public String blog_url {get;set;} 
		public String fundraising_contact_name {get;set;} 
		public String fundraising_contact_title {get;set;} 
		public String fundraising_contact_email {get;set;} 
		public String fundraising_contact_phone {get;set;} 
		public String preparer_firm_name {get;set;} 
		public String preparer_firm_address {get;set;} 
		public String preparer_firm_ein {get;set;} 
		public String preparer_firm_phone {get;set;} 
		public List<Senior_staff> senior_staff {get;set;} 
		public List<Other_staff> other_staff {get;set;} 
		public List<Accreditations> accreditations {get;set;} 

		public Operations(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'leader_name') {
							leader_name = parser.getText();
						} else if (text == 'leader_profile') {
							leader_profile = parser.getText();
						} else if (text == 'co_leader_name') {
							co_leader_name = parser.getText();
						} else if (text == 'co_leader_profile') {
							co_leader_profile = parser.getText();
						} else if (text == 'no_of_employees') {
							no_of_employees = parser.getIntegerValue();
						} else if (text == 'no_of_volunteers') {
							no_of_volunteers = parser.getIntegerValue();
						} else if (text == 'organization_email') {
							organization_email = parser.getText();
						} else if (text == 'organization_details_year') {
							organization_details_year = parser.getIntegerValue();
						} else if (text == 'officers_directors_key_employees') {
							officers_directors_key_employees = arrayOfOfficers_directors_key_employees(parser);
						} else if (text == 'highest_paid_employees') {
							highest_paid_employees = arrayOfOfficers_directors_key_employees(parser);
						} else if (text == 'employees_greater_than_100K') {
							employees_greater_than_100K = parser.getIntegerValue();
						} else if (text == 'board_chair_name') {
							board_chair_name = parser.getText();
						} else if (text == 'board_chair_affiliation') {
							board_chair_affiliation = parser.getText();
						} else if (text == 'board_chair_term_start') {
							board_chair_term_start = parser.getText();
						} else if (text == 'board_chair_term_end') {
							board_chair_term_end = parser.getText();
						} else if (text == 'board_co_chair_name') {
							board_co_chair_name = parser.getText();
						} else if (text == 'board_co_chair_affiliation') {
							board_co_chair_affiliation = parser.getText();
						} else if (text == 'board_co_chair_term_start') {
							board_co_chair_term_start = parser.getText();
						} else if (text == 'board_co_chair_term_end') {
							board_co_chair_term_end = parser.getText();
						} else if (text == 'board_of_directors') {
							board_of_directors = arrayOfBoard_of_directors(parser);
						} else if (text == 'board_leadership_practices') {
							board_leadership_practices = arrayOfCharting_impact_answers(parser);
						} else if (text == 'organization_demographics') {
							organization_demographics = new Organization_demographics(parser);
						} else if (text == 'demographics') {
							demographics = new Demographics(parser);
						} else if (text == 'contractors') {
							contractors = arrayOfContractors(parser);
						} else if (text == 'blog_url') {
							blog_url = parser.getText();
						} else if (text == 'fundraising_contact_name') {
							fundraising_contact_name = parser.getText();
						} else if (text == 'fundraising_contact_title') {
							fundraising_contact_title = parser.getText();
						} else if (text == 'fundraising_contact_email') {
							fundraising_contact_email = parser.getText();
						} else if (text == 'fundraising_contact_phone') {
							fundraising_contact_phone = parser.getText();
						} else if (text == 'preparer_firm_name') {
							preparer_firm_name = parser.getText();
						} else if (text == 'preparer_firm_address') {
							preparer_firm_address = parser.getText();
						} else if (text == 'preparer_firm_ein') {
							preparer_firm_ein = parser.getText();
						} else if (text == 'preparer_firm_phone') {
							preparer_firm_phone = parser.getText();
						} else if (text == 'senior_staff') {
							senior_staff = arrayOfSenior_staff(parser);
						} else if (text == 'other_staff') {
							other_staff = arrayOfOther_staff(parser);
						} else if (text == 'accreditations') {
							accreditations = arrayOfAccreditations(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Operations consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Accounting_ratios {
		public Integer year {get;set;} 
		public String months_of_cash {get;set;}
		public String liquidity {get;set;} 
		public String fringe_rate {get;set;} 
		public String net_gain_loss {get;set;} 

		public Accounting_ratios(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'year') {
							year = parser.getIntegerValue();
						} else if (text == 'months_of_cash') {
							//months_of_cash = parser.getText(); //Due to -- Error
						} else if (text == 'liquidity') {
							liquidity = parser.getText();
						} else if (text == 'fringe_rate') {
							fringe_rate = parser.getText();
						} else if (text == 'net_gain_loss') {
							net_gain_loss = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Accounting_ratios consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Programs {
		public String name {get;set;} 
		public String description {get;set;} 
		public String target_population {get;set;} 
		public String budget {get;set;} 
		public List<String> areas_served {get;set;} 

		public Programs(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'name') {
							name = parser.getText();
						} else if (text == 'description') {
							description = parser.getText();
						} else if (text == 'target_population') {
							target_population = parser.getText();
						} else if (text == 'budget') {
							budget = parser.getText();
						} else if (text == 'areas_served') {
							areas_served = arrayOfString(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Programs consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Financial_documents {
		public String form990_name {get;set;} 
		public String form990_year {get;set;} 
		public String form990_url {get;set;} 
		public String form990_source {get;set;} 

		public Financial_documents(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'form990_name') {
							form990_name = parser.getText();
						} else if (text == 'form990_year') {
							form990_year = parser.getText();
						} else if (text == 'form990_url') {
							form990_url = parser.getText();
						} else if (text == 'form990_source') {
							form990_source = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Financial_documents consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Subcategories_Z {
		public String subcategory {get;set;} 
		public Integer board_members {get;set;} 
		public Integer staff {get;set;} 
		public Integer senior_staff {get;set;} 
		public Boolean reported_by_ceo {get;set;} 
		public Boolean reported_by_coceo {get;set;} 

		public Subcategories_Z(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'subcategory') {
							subcategory = parser.getText();
						} else if (text == 'board_members') {
							board_members = parser.getIntegerValue();
						} else if (text == 'staff') {
							staff = parser.getIntegerValue();
						} else if (text == 'senior_staff') {
							senior_staff = parser.getIntegerValue();
						} else if (text == 'reported_by_ceo') {
							reported_by_ceo = parser.getBooleanValue();
						} else if (text == 'reported_by_coceo') {
							reported_by_coceo = parser.getBooleanValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Subcategories_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Years {
		public Integer year {get;set;} 
		public Double value {get;set;} 

		public Years(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'year') {
							year = parser.getIntegerValue();
						} else if (text == 'value') {
							value = parser.getDoubleValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Years consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Categories {
		public String category {get;set;} 
		public Org_does_not_collect_for org_does_not_collect_for {get;set;} 
		public List<Subcategories> subcategories {get;set;} 

		public Categories(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'category') {
							category = parser.getText();
						} else if (text == 'org_does_not_collect_for') {
							org_does_not_collect_for = new Org_does_not_collect_for(parser);
						} else if (text == 'subcategories') {
							subcategories = arrayOfSubcategories(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Categories consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Charting_impact_answers {
		public String question {get;set;} 
		public String answer {get;set;} 

		public Charting_impact_answers(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'question') {
							question = parser.getText();
						} else if (text == 'answer') {
							answer = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Charting_impact_answers consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Contractors {
		public String name {get;set;} 
		public String address {get;set;} 
		public String compensation {get;set;} 
		public String service_type {get;set;} 

		public Contractors(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'name') {
							name = parser.getText();
						} else if (text == 'address') {
							address = parser.getText();
						} else if (text == 'compensation') {
							compensation = parser.getText();
						} else if (text == 'service_type') {
							service_type = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Contractors consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Funding_sources {
		public String funding_source {get;set;} 
		public String funding_amount {get;set;} 

		public Funding_sources(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'funding_source') {
							funding_source = parser.getText();
						} else if (text == 'funding_amount') {
							funding_amount = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Funding_sources consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Financial_statements {
		public String fiscal_year_begin {get;set;} 
		public String fiscal_year_end {get;set;} 
		public String auditing_company {get;set;} 
		public String doc_name {get;set;} 
		public String document_url {get;set;} 

		public Financial_statements(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'fiscal_year_begin') {
							fiscal_year_begin = parser.getText();
						} else if (text == 'fiscal_year_end') {
							fiscal_year_end = parser.getText();
						} else if (text == 'auditing_company') {
							auditing_company = parser.getText();
						} else if (text == 'doc_name') {
							doc_name = parser.getText();
						} else if (text == 'document_url') {
							document_url = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Financial_statements consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Errors {
		public String resource {get;set;} 
		public String reason {get;set;} 

		public Errors(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'resource') {
							resource = parser.getText();
						} else if (text == 'reason') {
							reason = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Errors consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Affiliations {
		public String affiliation {get;set;} 
		public String year {get;set;} 

		public Affiliations(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'affiliation') {
							affiliation = parser.getText();
						} else if (text == 'year') {
							year = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Affiliations consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Parent_organizations {
		public String ein {get;set;} 
		public String organization_name {get;set;} 
		public String group_exemption {get;set;} 

		public Parent_organizations(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'ein') {
							ein = parser.getText();
						} else if (text == 'organization_name') {
							organization_name = parser.getText();
						} else if (text == 'group_exemption') {
							group_exemption = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Parent_organizations consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Liquidity {
		public Double months_of_cash {get;set;}         //changed data type
		public Double months_of_cash_and_investments {get;set;} 
		public Double months_of_estimated_liquid_unrestricted_net_assets {get;set;} 

		public Liquidity(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'months_of_cash') {
							months_of_cash = parser.getDoubleValue();
						} else if (text == 'months_of_cash_and_investments') {
							months_of_cash_and_investments = parser.getDoubleValue();
						} else if (text == 'months_of_estimated_liquid_unrestricted_net_assets') {
							months_of_estimated_liquid_unrestricted_net_assets = parser.getDoubleValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Liquidity consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Equity_strategies {
		public Boolean data_compensation {get;set;} 
		public Boolean data_disparities {get;set;} 
		public Boolean data_root_cause {get;set;} 
		public Boolean data_programming_goals {get;set;} 
		public Boolean data_feedback {get;set;} 
		public Boolean data_demographics {get;set;} 
		public Boolean data_strategic_plan {get;set;} 
		public Boolean policy_standards {get;set;} 
		public Boolean policy_promotion {get;set;} 
		public Boolean policy_evaluation {get;set;} 
		public Boolean policy_community {get;set;} 
		public Boolean policy_leadership {get;set;} 
		public Boolean policy_satisfaction {get;set;} 
		public Boolean policy_equity {get;set;} 
		public String equity_strategy_last_modified {get;set;} 

		public Equity_strategies(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'data_compensation') {
							data_compensation = parser.getBooleanValue();
						} else if (text == 'data_disparities') {
							data_disparities = parser.getBooleanValue();
						} else if (text == 'data_root_cause') {
							data_root_cause = parser.getBooleanValue();
						} else if (text == 'data_programming_goals') {
							data_programming_goals = parser.getBooleanValue();
						} else if (text == 'data_feedback') {
							data_feedback = parser.getBooleanValue();
						} else if (text == 'data_demographics') {
							data_demographics = parser.getBooleanValue();
						} else if (text == 'data_strategic_plan') {
							data_strategic_plan = parser.getBooleanValue();
						} else if (text == 'policy_standards') {
							policy_standards = parser.getBooleanValue();
						} else if (text == 'policy_promotion') {
							policy_promotion = parser.getBooleanValue();
						} else if (text == 'policy_evaluation') {
							policy_evaluation = parser.getBooleanValue();
						} else if (text == 'policy_community') {
							policy_community = parser.getBooleanValue();
						} else if (text == 'policy_leadership') {
							policy_leadership = parser.getBooleanValue();
						} else if (text == 'policy_satisfaction') {
							policy_satisfaction = parser.getBooleanValue();
						} else if (text == 'policy_equity') {
							policy_equity = parser.getBooleanValue();
						} else if (text == 'equity_strategy_last_modified') {
							equity_strategy_last_modified = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Equity_strategies consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Part_9_expenses {
		public Integer grants_orgs_us {get;set;} 
		public Integer grants_individuals_us {get;set;} 
		public Integer grants_orgs_non_us {get;set;} 
		public Integer benefits_total {get;set;} 
		public Integer compensation_current {get;set;} 
		public Integer compensation_disqualified {get;set;} 
		public Integer wages_total {get;set;} 
		public Integer pension_total {get;set;} 
		public Integer employee_benefits_total {get;set;} 
		public Integer payroll_tax_total {get;set;} 
		public Integer fees_management {get;set;} 
		public Integer fees_legal {get;set;} 
		public Integer accounting_fees_total {get;set;} 
		public Integer fees_lobbying {get;set;} 
		public Integer fundraising_total {get;set;} 
		public Integer fees_investments {get;set;} 
		public Integer fees_other {get;set;} 
		public Integer ads_promo {get;set;} 
		public Integer office {get;set;} 
		public Integer information_technology {get;set;} 
		public Integer expense_royalties {get;set;} 
		public Integer occupancy_total {get;set;} 
		public Integer travel_total {get;set;} 
		public Integer entertain_officials {get;set;} 
		public Integer meetings_total {get;set;} 
		public Integer interest_total {get;set;} 
		public Integer payments {get;set;} 
		public Integer depreciation_total {get;set;} 
		public Integer insurance {get;set;} 
		public Integer expense_a_total {get;set;} 
		public Integer expense_b_total {get;set;} 
		public Integer expense_c_total {get;set;} 
		public Integer expense_d_total {get;set;} 
		public Integer expense_e_total {get;set;} 
		public Integer expenses_total {get;set;} 
		public Integer total_program_services {get;set;} 
		public Integer total_management {get;set;} 
		public Integer total_fundraising {get;set;} 
		public Integer expense_joint_total {get;set;} 
		public Integer joint_services {get;set;} 
		public Integer joint_general {get;set;} 
		public Integer joint_fundraising {get;set;} 
		public Integer all_other_expenses {get;set;} 
		public String expense_a_description {get;set;} 
		public String expense_b_description {get;set;} 
		public String expense_c_description {get;set;} 
		public String expense_d_description {get;set;} 

		public Part_9_expenses(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'grants_orgs_us') {
							grants_orgs_us = parser.getIntegerValue();
						} else if (text == 'grants_individuals_us') {
							grants_individuals_us = parser.getIntegerValue();
						} else if (text == 'grants_orgs_non_us') {
							grants_orgs_non_us = parser.getIntegerValue();
						} else if (text == 'benefits_total') {
							benefits_total = parser.getIntegerValue();
						} else if (text == 'compensation_current') {
							compensation_current = parser.getIntegerValue();
						} else if (text == 'compensation_disqualified') {
							compensation_disqualified = parser.getIntegerValue();
						} else if (text == 'wages_total') {
							wages_total = parser.getIntegerValue();
						} else if (text == 'pension_total') {
							pension_total = parser.getIntegerValue();
						} else if (text == 'employee_benefits_total') {
							employee_benefits_total = parser.getIntegerValue();
						} else if (text == 'payroll_tax_total') {
							payroll_tax_total = parser.getIntegerValue();
						} else if (text == 'fees_management') {
							fees_management = parser.getIntegerValue();
						} else if (text == 'fees_legal') {
							fees_legal = parser.getIntegerValue();
						} else if (text == 'accounting_fees_total') {
							accounting_fees_total = parser.getIntegerValue();
						} else if (text == 'fees_lobbying') {
							fees_lobbying = parser.getIntegerValue();
						} else if (text == 'fundraising_total') {
							fundraising_total = parser.getIntegerValue();
						} else if (text == 'fees_investments') {
							fees_investments = parser.getIntegerValue();
						} else if (text == 'fees_other') {
							fees_other = parser.getIntegerValue();
						} else if (text == 'ads_promo') {
							ads_promo = parser.getIntegerValue();
						} else if (text == 'office') {
							office = parser.getIntegerValue();
						} else if (text == 'information_technology') {
							information_technology = parser.getIntegerValue();
						} else if (text == 'expense_royalties') {
							expense_royalties = parser.getIntegerValue();
						} else if (text == 'occupancy_total') {
							occupancy_total = parser.getIntegerValue();
						} else if (text == 'travel_total') {
							travel_total = parser.getIntegerValue();
						} else if (text == 'entertain_officials') {
							entertain_officials = parser.getIntegerValue();
						} else if (text == 'meetings_total') {
							meetings_total = parser.getIntegerValue();
						} else if (text == 'interest_total') {
							interest_total = parser.getIntegerValue();
						} else if (text == 'payments') {
							payments = parser.getIntegerValue();
						} else if (text == 'depreciation_total') {
							depreciation_total = parser.getIntegerValue();
						} else if (text == 'insurance') {
							insurance = parser.getIntegerValue();
						} else if (text == 'expense_a_total') {
							expense_a_total = parser.getIntegerValue();
						} else if (text == 'expense_b_total') {
							expense_b_total = parser.getIntegerValue();
						} else if (text == 'expense_c_total') {
							expense_c_total = parser.getIntegerValue();
						} else if (text == 'expense_d_total') {
							expense_d_total = parser.getIntegerValue();
						} else if (text == 'expense_e_total') {
							expense_e_total = parser.getIntegerValue();
						} else if (text == 'expenses_total') {
							expenses_total = parser.getIntegerValue();
						} else if (text == 'total_program_services') {
							total_program_services = parser.getIntegerValue();
						} else if (text == 'total_management') {
							total_management = parser.getIntegerValue();
						} else if (text == 'total_fundraising') {
							total_fundraising = parser.getIntegerValue();
						} else if (text == 'expense_joint_total') {
							expense_joint_total = parser.getIntegerValue();
						} else if (text == 'joint_services') {
							joint_services = parser.getIntegerValue();
						} else if (text == 'joint_general') {
							joint_general = parser.getIntegerValue();
						} else if (text == 'joint_fundraising') {
							joint_fundraising = parser.getIntegerValue();
						} else if (text == 'all_other_expenses') {
							all_other_expenses = parser.getIntegerValue();
						} else if (text == 'expense_a_description') {
							expense_a_description = parser.getText();
						} else if (text == 'expense_b_description') {
							expense_b_description = parser.getText();
						} else if (text == 'expense_c_description') {
							expense_c_description = parser.getText();
						} else if (text == 'expense_d_description') {
							expense_d_description = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Part_9_expenses consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class F990_financials {
		public String period_begin {get;set;} 
		public String period_end {get;set;} 
		public Double membership_dues {get;set;} 
		public Double revenue_contributions {get;set;} 
		public Double revenue_govt_grants {get;set;} 
		public Double revenue_program_services {get;set;} 
		public Double revenue_investments {get;set;} 
		public Double revenue_special_events {get;set;} 
		public Double revenue_sales {get;set;} 
		public Double revenue_other {get;set;} 
		public Double revenue_total {get;set;} 
		public Double affiliate_net_payments {get;set;} 
		public Double expense_program_services {get;set;} 
		public Double expense_administration {get;set;} 
		public Double expense_fundraising {get;set;} 
		public Double expenses_total {get;set;} 
		public Double net_gain_loss {get;set;} 
		public Double expense_accounting {get;set;} 
		public Double expense_advertising_promotion {get;set;} 
		public Double expense_info_technology {get;set;} 
		public Double expense_insurance {get;set;} 
		public Double expense_interest {get;set;} 
		public Double expense_investment_management {get;set;} 
		public Double expense_legal {get;set;} 
		public Double expense_pension_plan {get;set;} 
		public Double expense_publications {get;set;} 
		public Double expense_profesional_fundraising {get;set;} 
		public Double assets_total {get;set;} 
		public Double unrestricted_net_assets {get;set;} 
		public Double net_fixed_assets_LBE {get;set;} 
		public Double net_assets_end_of_year {get;set;} 
		public Double other_expense {get;set;} 
		public Double notes_payable_mortgages {get;set;} 
		public Double liabilities_total {get;set;} 
		public String months_of_cash {get;set;} 
		public Part_8_revenue part_8_revenue {get;set;} 
		public Part_9_expenses part_9_expenses {get;set;} 
		public Part_10_balance_sheet part_10_balance_sheet {get;set;} 

		public F990_financials(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'period_begin') {
							period_begin = parser.getText();
						} else if (text == 'period_end') {
							period_end = parser.getText();
						} else if (text == 'membership_dues') {
							membership_dues = parser.getDoubleValue();
						} else if (text == 'revenue_contributions') {
							revenue_contributions = parser.getDoubleValue();
						} else if (text == 'revenue_govt_grants') {
							revenue_govt_grants = parser.getDoubleValue();
						} else if (text == 'revenue_program_services') {
							revenue_program_services = parser.getDoubleValue();
						} else if (text == 'revenue_investments') {
							revenue_investments = parser.getDoubleValue();
						} else if (text == 'revenue_special_events') {
							revenue_special_events = parser.getDoubleValue();
						} else if (text == 'revenue_sales') {
							revenue_sales = parser.getDoubleValue();
						} else if (text == 'revenue_other') {
							revenue_other = parser.getDoubleValue();
						} else if (text == 'revenue_total') {
							revenue_total = parser.getDoubleValue();
						} else if (text == 'affiliate_net_payments') {
							affiliate_net_payments = parser.getDoubleValue();
						} else if (text == 'expense_program_services') {
							expense_program_services = parser.getDoubleValue();
						} else if (text == 'expense_administration') {
							expense_administration = parser.getDoubleValue();
						} else if (text == 'expense_fundraising') {
							expense_fundraising = parser.getDoubleValue();
						} else if (text == 'expenses_total') {
							expenses_total = parser.getDoubleValue();
						} else if (text == 'net_gain_loss') {
							net_gain_loss = parser.getDoubleValue();
						} else if (text == 'expense_accounting') {
							expense_accounting = parser.getDoubleValue();
						} else if (text == 'expense_advertising_promotion') {
							expense_advertising_promotion = parser.getDoubleValue();
						} else if (text == 'expense_info_technology') {
							expense_info_technology = parser.getDoubleValue();
						} else if (text == 'expense_insurance') {
							expense_insurance = parser.getDoubleValue();
						} else if (text == 'expense_interest') {
							expense_interest = parser.getDoubleValue();
						} else if (text == 'expense_investment_management') {
							expense_investment_management = parser.getDoubleValue();
						} else if (text == 'expense_legal') {
							expense_legal = parser.getDoubleValue();
						} else if (text == 'expense_pension_plan') {
							expense_pension_plan = parser.getDoubleValue();
						} else if (text == 'expense_publications') {
							expense_publications = parser.getDoubleValue();
						} else if (text == 'expense_profesional_fundraising') {
							expense_profesional_fundraising = parser.getDoubleValue();
						} else if (text == 'assets_total') {
                            system.debug('@@@::1:::');
							assets_total = parser.getDoubleValue();
						} else if (text == 'unrestricted_net_assets') {
							unrestricted_net_assets = parser.getDoubleValue();
						} else if (text == 'net_fixed_assets_LBE') {
							net_fixed_assets_LBE = parser.getDoubleValue();
						} else if (text == 'net_assets_end_of_year') {
							net_assets_end_of_year = parser.getDoubleValue();
						} else if (text == 'other_expense') {
							other_expense = parser.getDoubleValue();
						} else if (text == 'notes_payable_mortgages') {
							notes_payable_mortgages = parser.getDoubleValue();
						} else if (text == 'liabilities_total') {
							liabilities_total = parser.getDoubleValue();
						} else if (text == 'months_of_cash') {
							months_of_cash = parser.getText(); //Due to --Error
						} else if (text == 'part_8_revenue') {
							part_8_revenue = new Part_8_revenue(parser);
						} else if (text == 'part_9_expenses') {
							part_9_expenses = new Part_9_expenses(parser);
						} else if (text == 'part_10_balance_sheet') {
							part_10_balance_sheet = new Part_10_balance_sheet(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'F990_financials consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Platinum_metrics {
		public String metric {get;set;} 
		public List<Years> years {get;set;} 
		public List<String> target_population_served {get;set;} 
		public String type_of_metric {get;set;} 
		public String direction_of_success {get;set;} 

		public Platinum_metrics(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'metric') {
							metric = parser.getText();
						} else if (text == 'years') {
							years = arrayOfYears(parser);
						} else if (text == 'target_population_served') {
							target_population_served = arrayOfString(parser);
						} else if (text == 'type_of_metric') {
							type_of_metric = parser.getText();
						} else if (text == 'direction_of_success') {
							direction_of_success = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Platinum_metrics consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Balance_sheet_composition {
		public Integer cash {get;set;} 
		public String investments {get;set;} 
		public Integer receivables {get;set;} 
		public String gross_land_buildings_and_equipment_lbe {get;set;} 
		public String accumulated_depreciation_as_percent_of_lbe {get;set;} 
		public String liabilities_as_percent_of_net_assets {get;set;} 
		public String unrestricted_net_assets {get;set;} 
		public Integer temporarily_restricted_net_assets {get;set;} 
		public Integer permanently_restricted_net_assets {get;set;} 
		public String total_net_assets {get;set;} 

		public Balance_sheet_composition(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'cash') {
							cash = parser.getIntegerValue();
						} else if (text == 'investments') {
							investments = parser.getText();
						} else if (text == 'receivables') {
							receivables = parser.getIntegerValue();
						} else if (text == 'gross_land_buildings_and_equipment_lbe') {
							gross_land_buildings_and_equipment_lbe = parser.getText();
						} else if (text == 'accumulated_depreciation_as_percent_of_lbe') {
							accumulated_depreciation_as_percent_of_lbe = parser.getText();
						} else if (text == 'liabilities_as_percent_of_net_assets') {
							liabilities_as_percent_of_net_assets = parser.getText();
						} else if (text == 'unrestricted_net_assets') {
							unrestricted_net_assets = parser.getText();
						} else if (text == 'temporarily_restricted_net_assets') {
							temporarily_restricted_net_assets = parser.getIntegerValue();
						} else if (text == 'permanently_restricted_net_assets') {
							permanently_restricted_net_assets = parser.getIntegerValue();
						} else if (text == 'total_net_assets') {
							total_net_assets = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Balance_sheet_composition consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Full_cost_components {
		public String total_expenses_after_depreciation {get;set;} 
		public Integer one_month_of_savings {get;set;} 
		public Integer debt_principal_payment {get;set;} 
		public Integer fixed_asset_additions {get;set;} 
		public String total_full_costs_estimated {get;set;} 

		public Full_cost_components(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'total_expenses_after_depreciation') {
							total_expenses_after_depreciation = parser.getText();
						} else if (text == 'one_month_of_savings') {
							one_month_of_savings = parser.getIntegerValue();
						} else if (text == 'debt_principal_payment') {
							debt_principal_payment = parser.getIntegerValue();
						} else if (text == 'fixed_asset_additions') {
							fixed_asset_additions = parser.getIntegerValue();
						} else if (text == 'total_full_costs_estimated') {
							total_full_costs_estimated = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Full_cost_components consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Pcs_codes {
		public String pcs_facet {get;set;} 
		public String pcs_code {get;set;} 
		public String pcs_description {get;set;} 
		public String pcs_parent_code {get;set;} 
		public String pcs_parent_description {get;set;} 

		public Pcs_codes(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'pcs_facet') {
							pcs_facet = parser.getText();
						} else if (text == 'pcs_code') {
							pcs_code = parser.getText();
						} else if (text == 'pcs_description') {
							pcs_description = parser.getText();
						} else if (text == 'pcs_parent_code') {
							pcs_parent_code = parser.getText();
						} else if (text == 'pcs_parent_description') {
							pcs_parent_description = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Pcs_codes consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Capital_structure_indicators {
		public Liquidity liquidity {get;set;} 
		public Balance_sheet_composition balance_sheet_composition {get;set;} 

		public Capital_structure_indicators(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'liquidity') {
							liquidity = new Liquidity(parser);
						} else if (text == 'balance_sheet_composition') {
							balance_sheet_composition = new Balance_sheet_composition(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Capital_structure_indicators consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Profile_data_change_dates {
		public String primary_address_last_modified {get;set;} 
		public String payment_address_last_modified {get;set;} 
		public String primary_contact_email_last_modified {get;set;} 
		public String fundraising_contact_email_last_modified {get;set;} 
		public String org_website_last_modified {get;set;} 

		public Profile_data_change_dates(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'primary_address_last_modified') {
							primary_address_last_modified = parser.getText();
						} else if (text == 'payment_address_last_modified') {
							payment_address_last_modified = parser.getText();
						} else if (text == 'primary_contact_email_last_modified') {
							primary_contact_email_last_modified = parser.getText();
						} else if (text == 'fundraising_contact_email_last_modified') {
							fundraising_contact_email_last_modified = parser.getText();
						} else if (text == 'org_website_last_modified') {
							org_website_last_modified = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Profile_data_change_dates consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Sic_codes {
		public String sic_code {get;set;} 
		public String sic_description {get;set;} 

		public Sic_codes(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'sic_code') {
							sic_code = parser.getText();
						} else if (text == 'sic_description') {
							sic_description = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Sic_codes consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Profitability {
		public Integer Unrestricted_surplus_deficit_before_depreciation {get;set;} 
		public String surplus_as_percent_of_expenses_before_depreciation {get;set;} 
		public Integer Unrestricted_surplus_deficit_after_depreciation {get;set;} 
		public String surplus_as_percent_of_expenses_after_depreciation {get;set;} 

		public Profitability(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'Unrestricted_surplus_(deficit)_before_depreciation') {
							Unrestricted_surplus_deficit_before_depreciation = parser.getIntegerValue();
						} else if (text == 'surplus_as_percent_of_expenses_before_depreciation') {
							surplus_as_percent_of_expenses_before_depreciation = parser.getText();
						} else if (text == 'Unrestricted_surplus_(deficit)_after_depreciation') {
							Unrestricted_surplus_deficit_after_depreciation = parser.getIntegerValue();
						} else if (text == 'surplus_as_percent_of_expenses_after_depreciation') {
							surplus_as_percent_of_expenses_after_depreciation = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Profitability consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Subcategories {
		public String subcategory {get;set;} 
		public List<Staff_levels> staff_levels {get;set;} 

		public Subcategories(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'subcategory') {
							subcategory = parser.getText();
						} else if (text == 'staff_levels') {
							staff_levels = arrayOfStaff_levels(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Subcategories consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Staff_level_totals {
		public String total_board_members {get;set;} 
		public String total_staff {get;set;} 
		public String total_senior_staff {get;set;} 

		public Staff_level_totals(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'total_board_members') {
							total_board_members = parser.getText();
						} else if (text == 'total_staff') {
							total_staff = parser.getText();
						} else if (text == 'total_senior_staff') {
							total_senior_staff = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Staff_level_totals consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Staff_levels {
		public String staff_level {get;set;} 
		public Integer count {get;set;} 

		public Staff_levels(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'staff_level') {
							staff_level = parser.getText();
						} else if (text == 'count') {
							count = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Staff_levels consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Pf990_financials {
		public Integer investments_us_state_government {get;set;} 
		public String period_begin {get;set;} 
		public String period_end {get;set;} 
		public Integer cash_equivalent_investible_assets {get;set;} 
		public Integer net_investment_income {get;set;} 
		public Integer adjusted_net_income {get;set;} 
		public Integer total_operating_expenses {get;set;} 
		public Integer contributions {get;set;} 
		public Integer total_expenses {get;set;} 
		public Integer expense_accounting {get;set;} 
		public Integer expense_interest {get;set;} 
		public Integer expense_legal {get;set;} 
		public Integer expense_professional_fees {get;set;} 
		public Integer expense_pension_plans {get;set;} 
		public Integer expense_publications {get;set;} 
		public Integer investments_us_state_govt {get;set;} 
		public Integer investments_stocks {get;set;} 
		public Integer investments_bonds {get;set;} 
		public Integer investments_other {get;set;} 
		public Integer land_buildings_equipment {get;set;} 
		public Integer other_assets {get;set;} 
		public Integer total_assets {get;set;} 
		public Integer total_liabilities {get;set;} 
		public Integer net_assets {get;set;} 
		public Integer income_total {get;set;} 

		public Pf990_financials(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'investments_us_state_government') {
							investments_us_state_government = parser.getIntegerValue();
						} else if (text == 'period_begin') {
							period_begin = parser.getText();
						} else if (text == 'period_end') {
							period_end = parser.getText();
						} else if (text == 'cash_equivalent_investible_assets') {
							cash_equivalent_investible_assets = parser.getIntegerValue();
						} else if (text == 'net_investment_income') {
							net_investment_income = parser.getIntegerValue();
						} else if (text == 'adjusted_net_income') {
							adjusted_net_income = parser.getIntegerValue();
						} else if (text == 'total_operating_expenses') {
							total_operating_expenses = parser.getIntegerValue();
						} else if (text == 'contributions') {
							contributions = parser.getIntegerValue();
						} else if (text == 'total_expenses') {
							total_expenses = parser.getIntegerValue();
						} else if (text == 'expense_accounting') {
							expense_accounting = parser.getIntegerValue();
						} else if (text == 'expense_interest') {
							expense_interest = parser.getIntegerValue();
						} else if (text == 'expense_legal') {
							expense_legal = parser.getIntegerValue();
						} else if (text == 'expense_professional_fees') {
							expense_professional_fees = parser.getIntegerValue();
						} else if (text == 'expense_pension_plans') {
							expense_pension_plans = parser.getIntegerValue();
						} else if (text == 'expense_publications') {
							expense_publications = parser.getIntegerValue();
						} else if (text == 'investments_us_state_govt') {
							investments_us_state_govt = parser.getIntegerValue();
						} else if (text == 'investments_stocks') {
							investments_stocks = parser.getIntegerValue();
						} else if (text == 'investments_bonds') {
							investments_bonds = parser.getIntegerValue();
						} else if (text == 'investments_other') {
							investments_other = parser.getIntegerValue();
						} else if (text == 'land_buildings_equipment') {
							land_buildings_equipment = parser.getIntegerValue();
						} else if (text == 'other_assets') {
							other_assets = parser.getIntegerValue();
						} else if (text == 'total_assets') {
							total_assets = parser.getIntegerValue();
						} else if (text == 'total_liabilities') {
							total_liabilities = parser.getIntegerValue();
						} else if (text == 'net_assets') {
							net_assets = parser.getIntegerValue();
						} else if (text == 'income_total') {
							income_total = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Pf990_financials consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Part_1_revenue_expenses {
		public Integer contributions_total {get;set;} 
		public Integer service_revenue {get;set;} 
		public Integer membership_dues {get;set;} 
		public Integer income_investments {get;set;} 
		public Integer gross_other {get;set;} 
		public Integer cost_other {get;set;} 
		public Integer gain_other {get;set;} 
		public Integer gross_gaming {get;set;} 
		public Integer gross_fundraising {get;set;} 
		public Integer gross_special {get;set;} 
		public Integer direct_expenses {get;set;} 
		public Integer net_special {get;set;} 
		public Integer gross_sales {get;set;} 
		public Integer cost_goods {get;set;} 
		public Integer gross_profit {get;set;} 
		public Integer revenue_other {get;set;} 
		public Integer revenue_total {get;set;} 
		public Integer grants_total {get;set;} 
		public Integer benefits_total {get;set;} 
		public Integer compensation_total {get;set;} 
		public Integer fundraising_total {get;set;} 
		public Integer occupancy_total {get;set;} 
		public Integer printing_total {get;set;} 
		public Integer other_expenses_total {get;set;} 
		public Integer functional_expenses_total {get;set;} 
		public Integer year_excess {get;set;} 
		public Integer net_assets_boy {get;set;} 
		public Integer assets_change {get;set;} 
		public Integer net_assets_eoy {get;set;} 

		public Part_1_revenue_expenses(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'contributions_total') {
							contributions_total = parser.getIntegerValue();
						} else if (text == 'service_revenue') {
							service_revenue = parser.getIntegerValue();
						} else if (text == 'membership_dues') {
							membership_dues = parser.getIntegerValue();
						} else if (text == 'income_investments') {
							income_investments = parser.getIntegerValue();
						} else if (text == 'gross_other') {
							gross_other = parser.getIntegerValue();
						} else if (text == 'cost_other') {
							cost_other = parser.getIntegerValue();
						} else if (text == 'gain_other') {
							gain_other = parser.getIntegerValue();
						} else if (text == 'gross_gaming') {
							gross_gaming = parser.getIntegerValue();
						} else if (text == 'gross_fundraising') {
							gross_fundraising = parser.getIntegerValue();
						} else if (text == 'gross_special') {
							gross_special = parser.getIntegerValue();
						} else if (text == 'direct_expenses') {
							direct_expenses = parser.getIntegerValue();
						} else if (text == 'net_special') {
							net_special = parser.getIntegerValue();
						} else if (text == 'gross_sales') {
							gross_sales = parser.getIntegerValue();
						} else if (text == 'cost_goods') {
							cost_goods = parser.getIntegerValue();
						} else if (text == 'gross_profit') {
							gross_profit = parser.getIntegerValue();
						} else if (text == 'revenue_other') {
							revenue_other = parser.getIntegerValue();
						} else if (text == 'revenue_total') {
							revenue_total = parser.getIntegerValue();
						} else if (text == 'grants_total') {
							grants_total = parser.getIntegerValue();
						} else if (text == 'benefits_total') {
							benefits_total = parser.getIntegerValue();
						} else if (text == 'compensation_total') {
							compensation_total = parser.getIntegerValue();
						} else if (text == 'fundraising_total') {
							fundraising_total = parser.getIntegerValue();
						} else if (text == 'occupancy_total') {
							occupancy_total = parser.getIntegerValue();
						} else if (text == 'printing_total') {
							printing_total = parser.getIntegerValue();
						} else if (text == 'other_expenses_total') {
							other_expenses_total = parser.getIntegerValue();
						} else if (text == 'functional_expenses_total') {
							functional_expenses_total = parser.getIntegerValue();
						} else if (text == 'year_excess') {
							year_excess = parser.getIntegerValue();
						} else if (text == 'net_assets_boy') {
							net_assets_boy = parser.getIntegerValue();
						} else if (text == 'assets_change') {
							assets_change = parser.getIntegerValue();
						} else if (text == 'net_assets_eoy') {
							net_assets_eoy = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Part_1_revenue_expenses consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public Integer code {get;set;} 
	public String message {get;set;} 
	public Integer took {get;set;} 
	public List<Errors> errors {get;set;} 
	public Data data {get;set;} 

	public JSON2ApexV3(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                String text = parser.getText();
                try{
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'code') {
                            code = parser.getIntegerValue();
                        } else if (text == 'message') {
                            message = parser.getText();
                        } else if (text == 'took') {
                            took = parser.getIntegerValue();
                        } else if (text == 'errors') {
                            errors = arrayOfErrors(parser);
                        } else if (text == 'data') {
                            data = new Data(parser);
                        } else {
                            System.debug(LoggingLevel.WARN, 'JSON2ApexV3 consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }Catch(Exception ex){
                    system.debug('@@@::::'+ex.getMessage());
                    system.debug('@@@::::'+ex.getLineNumber());
                    system.debug('@@@::::'+ex.getCause());
                }
			}
		}
	}
	
	public class Key_data_checks {
		public Boolean data_check_errors {get;set;} 

		public Key_data_checks(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'data_check_errors') {
							data_check_errors = parser.getBooleanValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Key_data_checks consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class F990ez_financials {
		public String period_begin {get;set;} 
		public String period_end {get;set;} 
		public String accounting_method {get;set;} 
		public String organization_type {get;set;} 
		public String date_last_modified {get;set;} 
		public Double revenue_contributions {get;set;} 
		public Double revenue_program_services {get;set;} 
		public Double revenue_membership_dues {get;set;} 
		public Double revenue_investments {get;set;} 
		public Double revenue_sales_other {get;set;} 
		public Double revenue_special_events {get;set;} 
		public Double revenue_sales_inventory {get;set;} 
		public Double revenue_sales {get;set;} 
		public Double revenue_other {get;set;} 
		public Double total_revenue {get;set;} 
		public Double expense_grants {get;set;} 
		public Double expense_benefits {get;set;} 
		public Double expense_salaries_employee_benefits {get;set;} 
		public Double expense_professional_fees {get;set;} 
		public Double expense_occupancy {get;set;} 
		public Double expense_printing_publications_postage {get;set;} 
		public Double expense_other {get;set;} 
		public Double total_expenses {get;set;} 
		public Double net_gain_loss {get;set;} 
		public Double other_changes {get;set;} 
		public Double cash_savings_investments_boy {get;set;} 
		public Double land_and_buidings_boy {get;set;} 
		public Double other_assets_boy {get;set;} 
		public Double total_assets_boy {get;set;} 
		public Double total_liabilities_boy {get;set;} 
		public Double net_assets_boy {get;set;} 
		public Double cash_savings_investments_eoy {get;set;} 
		public Double land_and_buidings_eoy {get;set;} 
		public Double other_assets_eoy {get;set;} 
		public Double total_assets_eoy {get;set;} 
		public Double total_liabilities_eoy {get;set;} 
		public Double net_assets_eoy {get;set;} 
		public Part_1_revenue_expenses part_1_revenue_expenses {get;set;} 
		public Part_2_balance_sheet part_2_balance_sheet {get;set;} 

		public F990ez_financials(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'period_begin') {
							period_begin = parser.getText();
						} else if (text == 'period_end') {
							period_end = parser.getText();
						} else if (text == 'accounting_method') {
							accounting_method = parser.getText();
						} else if (text == 'organization_type') {
							organization_type = parser.getText();
						} else if (text == 'date_last_modified') {
							date_last_modified = parser.getText();
						} else if (text == 'revenue_contributions') {
							revenue_contributions = parser.getDoubleValue();
						} else if (text == 'revenue_program_services') {
							revenue_program_services = parser.getDoubleValue();
						} else if (text == 'revenue_membership_dues') {
							revenue_membership_dues = parser.getDoubleValue();
						} else if (text == 'revenue_investments') {
							revenue_investments = parser.getDoubleValue();
						} else if (text == 'revenue_sales_other') {
							revenue_sales_other = parser.getDoubleValue();
						} else if (text == 'revenue_special_events') {
							revenue_special_events = parser.getDoubleValue();
						} else if (text == 'revenue_sales_inventory') {
							revenue_sales_inventory = parser.getDoubleValue();
						} else if (text == 'revenue_sales') {
							revenue_sales = parser.getDoubleValue();
						} else if (text == 'revenue_other') {
							revenue_other = parser.getDoubleValue();
						} else if (text == 'total_revenue') {
							total_revenue = parser.getDoubleValue();
						} else if (text == 'expense_grants') {
							expense_grants = parser.getDoubleValue();
						} else if (text == 'expense_benefits') {
							expense_benefits = parser.getDoubleValue();
						} else if (text == 'expense_salaries_employee_benefits') {
							expense_salaries_employee_benefits = parser.getDoubleValue();
						} else if (text == 'expense_professional_fees') {
							expense_professional_fees = parser.getDoubleValue();
						} else if (text == 'expense_occupancy') {
							expense_occupancy = parser.getDoubleValue();
						} else if (text == 'expense_printing_publications_postage') {
							expense_printing_publications_postage = parser.getDoubleValue();
						} else if (text == 'expense_other') {
							expense_other = parser.getDoubleValue();
						} else if (text == 'total_expenses') {
							total_expenses = parser.getDoubleValue();
						} else if (text == 'net_gain_loss') {
							net_gain_loss = parser.getDoubleValue();
						} else if (text == 'other_changes') {
							other_changes = parser.getDoubleValue();
						} else if (text == 'cash_savings_investments_boy') {
							cash_savings_investments_boy = parser.getDoubleValue();
						} else if (text == 'land_and_buidings_boy') {
							land_and_buidings_boy = parser.getDoubleValue();
						} else if (text == 'other_assets_boy') {
							other_assets_boy = parser.getDoubleValue();
						} else if (text == 'total_assets_boy') {
							total_assets_boy = parser.getDoubleValue();
						} else if (text == 'total_liabilities_boy') {
							total_liabilities_boy = parser.getDoubleValue();
						} else if (text == 'net_assets_boy') {
							net_assets_boy = parser.getDoubleValue();
						} else if (text == 'cash_savings_investments_eoy') {
							cash_savings_investments_eoy = parser.getDoubleValue();
						} else if (text == 'land_and_buidings_eoy') {
							land_and_buidings_eoy = parser.getDoubleValue();
						} else if (text == 'other_assets_eoy') {
							other_assets_eoy = parser.getDoubleValue();
						} else if (text == 'total_assets_eoy') {
							total_assets_eoy = parser.getDoubleValue();
						} else if (text == 'total_liabilities_eoy') {
							total_liabilities_eoy = parser.getDoubleValue();
						} else if (text == 'net_assets_eoy') {
							net_assets_eoy = parser.getDoubleValue();
						} else if (text == 'part_1_revenue_expenses') {
							part_1_revenue_expenses = new Part_1_revenue_expenses(parser);
						} else if (text == 'part_2_balance_sheet') {
							part_2_balance_sheet = new Part_2_balance_sheet(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'F990ez_financials consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Categories_Z {
		public String category {get;set;} 
		public Boolean board_members_not_collected {get;set;} 
		public Boolean staff_not_collected {get;set;} 
		public Boolean senior_staff_not_collected {get;set;} 
		public List<Subcategories_Z> subcategories {get;set;} 

		public Categories_Z(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'category') {
							category = parser.getText();
						} else if (text == 'board_members_not_collected') {
							board_members_not_collected = parser.getBooleanValue();
						} else if (text == 'staff_not_collected') {
							staff_not_collected = parser.getBooleanValue();
						} else if (text == 'senior_staff_not_collected') {
							senior_staff_not_collected = parser.getBooleanValue();
						} else if (text == 'subcategories') {
							subcategories = arrayOfSubcategories_Z(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Categories_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Videos {
		public String video_caption {get;set;} 
		public String video_url {get;set;} 

		public Videos(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'video_caption') {
							video_caption = parser.getText();
						} else if (text == 'video_url') {
							video_url = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Videos consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Platinum_evaluation_documents {
		public String document_name {get;set;} 
		public String document_year {get;set;} 
		public String document_url {get;set;} 
		public String document_type {get;set;} 

		public Platinum_evaluation_documents(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'document_name') {
							document_name = parser.getText();
						} else if (text == 'document_year') {
							document_year = parser.getText();
						} else if (text == 'document_url') {
							document_url = parser.getText();
						} else if (text == 'document_type') {
							document_type = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Platinum_evaluation_documents consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Photos {
		public String picture_url {get;set;} 
		public String caption {get;set;} 

		public Photos(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'picture_url') {
							picture_url = parser.getText();
						} else if (text == 'caption') {
							caption = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Photos consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Demographics {
		public Staff_level_totals staff_level_totals {get;set;} 
		public Equity_strategies equity_strategies {get;set;} 
		public List<Categories_Z> categories {get;set;} 

		public Demographics(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'staff_level_totals') {
							staff_level_totals = new Staff_level_totals(parser);
						} else if (text == 'equity_strategies') {
							equity_strategies = new Equity_strategies(parser);
						} else if (text == 'categories') {
							categories = arrayOfCategories_Z(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Demographics consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Feedback_responses {
		public String question_text {get;set;} 
		public String response_text {get;set;} 

		public Feedback_responses(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'question_text') {
							question_text = parser.getText();
						} else if (text == 'response_text') {
							response_text = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Feedback_responses consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Forms_990T {
		public String form990t_name {get;set;} 
		public String form990t_url {get;set;} 

		public Forms_990T(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'form990t_name') {
							form990t_name = parser.getText();
						} else if (text == 'form990t_url') {
							form990t_url = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Forms_990T consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Part_2_balance_sheet {
		public Integer cash_boy {get;set;} 
		public Integer lbe_boy {get;set;} 
		public Integer assets_other_boy {get;set;} 
		public Integer assets_total_boy {get;set;} 
		public Integer liability_total_boy {get;set;} 
		public Integer net_total_boy {get;set;} 
		public Integer cash_eoy {get;set;} 
		public Integer lbe_eoy {get;set;} 
		public Integer assets_other_eoy {get;set;} 
		public Integer assets_total_eoy {get;set;} 
		public Integer liability_total_eoy {get;set;} 
		public Integer net_total_eoy {get;set;} 

		public Part_2_balance_sheet(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'cash_boy') {
							cash_boy = parser.getIntegerValue();
						} else if (text == 'lbe_boy') {
							lbe_boy = parser.getIntegerValue();
						} else if (text == 'assets_other_boy') {
							assets_other_boy = parser.getIntegerValue();
						} else if (text == 'assets_total_boy') {
							assets_total_boy = parser.getIntegerValue();
						} else if (text == 'liability_total_boy') {
							liability_total_boy = parser.getIntegerValue();
						} else if (text == 'net_total_boy') {
							net_total_boy = parser.getIntegerValue();
						} else if (text == 'cash_eoy') {
							cash_eoy = parser.getIntegerValue();
						} else if (text == 'lbe_eoy') {
							lbe_eoy = parser.getIntegerValue();
						} else if (text == 'assets_other_eoy') {
							assets_other_eoy = parser.getIntegerValue();
						} else if (text == 'assets_total_eoy') {
							assets_total_eoy = parser.getIntegerValue();
						} else if (text == 'liability_total_eoy') {
							liability_total_eoy = parser.getIntegerValue();
						} else if (text == 'net_total_eoy') {
							net_total_eoy = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Part_2_balance_sheet consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Financials {
		public Most_recent_year_financials most_recent_year_financials {get;set;} 
		public List<F990_financials> f990_financials {get;set;} 
		public List<Pf990_financials> pf990_financials {get;set;} 
		public List<F990ez_financials> f990ez_financials {get;set;} 
		public List<Financial_trends_analysis> financial_trends_analysis {get;set;} 
		public List<Financial_documents> financial_documents {get;set;} 
		public List<Forms_990T> forms_990T {get;set;} 
		public List<Funding_needs> funding_needs {get;set;} 
		public List<Funding_sources> funding_sources {get;set;} 
		public List<Financial_statements> financial_statements {get;set;} 
		public List<Annual_reports> annual_reports {get;set;} 
		public List<Accounting_ratios> accounting_ratios {get;set;} 

		public Financials(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'most_recent_year_financials') {
							most_recent_year_financials = new Most_recent_year_financials(parser);
						} else if (text == 'f990_financials') {
							f990_financials = arrayOfF990_financials(parser);
						} else if (text == 'pf990_financials') {
							pf990_financials = arrayOfPf990_financials(parser);
						} else if (text == 'f990ez_financials') {
							f990ez_financials = arrayOfF990ez_financials(parser);
						} else if (text == 'financial_trends_analysis') {
							financial_trends_analysis = arrayOfFinancial_trends_analysis(parser);
						} else if (text == 'financial_documents') {
							financial_documents = arrayOfFinancial_documents(parser);
						} else if (text == 'forms_990T') {
							forms_990T = arrayOfForms_990T(parser);
						} else if (text == 'funding_needs') {
							funding_needs = arrayOfFunding_needs(parser);
						} else if (text == 'funding_sources') {
							funding_sources = arrayOfFunding_sources(parser);
						} else if (text == 'financial_statements') {
							financial_statements = arrayOfFinancial_statements(parser);
						} else if (text == 'annual_reports') {
							annual_reports = arrayOfAnnual_reports(parser);
						} else if (text == 'accounting_ratios') {
							accounting_ratios = arrayOfAccounting_ratios(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Financials consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Financial_trends_analysis {
		public String fiscal_year {get;set;} 
		public Business_model_indicators business_model_indicators {get;set;} 
		public Capital_structure_indicators capital_structure_indicators {get;set;} 
		public Key_data_checks key_data_checks {get;set;} 

		public Financial_trends_analysis(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'fiscal_year') {
							fiscal_year = parser.getText();
						} else if (text == 'business_model_indicators') {
							business_model_indicators = new Business_model_indicators(parser);
						} else if (text == 'capital_structure_indicators') {
							capital_structure_indicators = new Capital_structure_indicators(parser);
						} else if (text == 'key_data_checks') {
							key_data_checks = new Key_data_checks(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Financial_trends_analysis consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Revenue_composition {
		public String total_revenue_unrestricted_and_restricted {get;set;} 
		public String total_revenue_percent_change_over_prior_year {get;set;} 
		public Double total_revenue_prior {get;set;} 
		public String program_svcs_revenue {get;set;} 
		public String membership_dues {get;set;} 
		public String investment_income {get;set;} 
		public String government_grants {get;set;} 
		public String other_grants_contributions {get;set;} 
		public String other_revenue {get;set;} 

		public Revenue_composition(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'total_revenue_unrestricted_and_restricted') {
							total_revenue_unrestricted_and_restricted = parser.getText();
						} else if (text == 'total_revenue_percent_change_over_prior_year') {
							total_revenue_percent_change_over_prior_year = parser.getText();
						} else if (text == 'total_revenue_prior') {
							total_revenue_prior = parser.getDoubleValue();
						} else if (text == 'program_svcs_revenue') {
							program_svcs_revenue = parser.getText();
						} else if (text == 'membership_dues') {
							membership_dues = parser.getText();
						} else if (text == 'investment_income') {
							investment_income = parser.getText();
						} else if (text == 'government_grants') {
							government_grants = parser.getText();
						} else if (text == 'other_grants_contributions') {
							other_grants_contributions = parser.getText();
						} else if (text == 'other_revenue') {
							other_revenue = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Revenue_composition consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Business_model_indicators {
		public Profitability profitability {get;set;} 
		public Revenue_composition revenue_composition {get;set;} 
		public Expense_composition expense_composition {get;set;} 
		public Full_cost_components full_cost_components {get;set;} 

		public Business_model_indicators(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'profitability') {
							profitability = new Profitability(parser);
						} else if (text == 'revenue_composition') {
							revenue_composition = new Revenue_composition(parser);
						} else if (text == 'expense_composition') {
							expense_composition = new Expense_composition(parser);
						} else if (text == 'full_cost_components') {
							full_cost_components = new Full_cost_components(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Business_model_indicators consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Board_of_directors {
		public String name {get;set;} 
		public String title {get;set;} 
		public String company {get;set;} 

		public Board_of_directors(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'name') {
							name = parser.getText();
						} else if (text == 'title') {
							title = parser.getText();
						} else if (text == 'company') {
							company = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Board_of_directors consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Organization_demographics {
		public Integer total_board_members {get;set;} 
		public Integer total_fulltime_staff {get;set;} 
		public Integer total_parttime_staff {get;set;} 
		public Integer total_staff {get;set;} 
		public Integer total_senior_staff {get;set;} 
		public Boolean tracks_staffboardvol_retention {get;set;} 
		public Boolean tracks_staffboard_income {get;set;} 
		public Boolean tracks_staffboard_age {get;set;} 
		public Boolean tracks_vendor_diversity {get;set;} 
		public Boolean has_diversity_committee {get;set;} 
		public Boolean has_diversity_manager {get;set;} 
		public Boolean diversity_manager_fulltime {get;set;} 
		public Boolean diversity_plan {get;set;} 
		public Boolean supports_diversity_via_other_methods {get;set;} 
		public Equity_strategies equity_strategies {get;set;} 
		public List<Categories> categories {get;set;} 

		public Organization_demographics(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'total_board_members') {
							total_board_members = parser.getIntegerValue();
						} else if (text == 'total_fulltime_staff') {
							total_fulltime_staff = parser.getIntegerValue();
						} else if (text == 'total_parttime_staff') {
							total_parttime_staff = parser.getIntegerValue();
						} else if (text == 'total_staff') {
							total_staff = parser.getIntegerValue();
						} else if (text == 'total_senior_staff') {
							total_senior_staff = parser.getIntegerValue();
						} else if (text == 'tracks_staffboardvol_retention') {
							tracks_staffboardvol_retention = parser.getBooleanValue();
						} else if (text == 'tracks_staffboard_income') {
							tracks_staffboard_income = parser.getBooleanValue();
						} else if (text == 'tracks_staffboard_age') {
							tracks_staffboard_age = parser.getBooleanValue();
						} else if (text == 'tracks_vendor_diversity') {
							tracks_vendor_diversity = parser.getBooleanValue();
						} else if (text == 'has_diversity_committee') {
							has_diversity_committee = parser.getBooleanValue();
						} else if (text == 'has_diversity_manager') {
							has_diversity_manager = parser.getBooleanValue();
						} else if (text == 'diversity_manager_fulltime') {
							diversity_manager_fulltime = parser.getBooleanValue();
						} else if (text == 'diversity_plan') {
							diversity_plan = parser.getBooleanValue();
						} else if (text == 'supports_diversity_via_other_methods') {
							supports_diversity_via_other_methods = parser.getBooleanValue();
						} else if (text == 'equity_strategies') {
							equity_strategies = new Equity_strategies(parser);
						} else if (text == 'categories') {
							categories = arrayOfCategories(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Organization_demographics consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Part_8_revenue {
		public Integer federated_campaigns {get;set;} 
		public Integer membership_dues {get;set;} 
		public Integer fundraising_events {get;set;} 
		public Integer related_orgs {get;set;} 
		public Integer government_grants {get;set;} 
		public Integer contributions_other {get;set;} 
		public Integer contributions_noncash {get;set;} 
		public Integer contributions_all {get;set;} 
		public Integer service_revenue {get;set;} 
		public Integer income_investment {get;set;} 
		public Integer income_bonds {get;set;} 
		public Integer royalties {get;set;} 
		public Integer rents_real {get;set;} 
		public Integer rents_personal {get;set;} 
		public Integer rent_expenses_real {get;set;} 
		public Integer rent_expenses_personal {get;set;} 
		public Integer rent_income_real {get;set;} 
		public Integer rent_income_personal {get;set;} 
		public Integer net_rental {get;set;} 
		public Integer gross_securities {get;set;} 
		public Integer gross_other {get;set;} 
		public Integer cost_securities {get;set;} 
		public Integer cost_other {get;set;} 
		public Integer gain_securities {get;set;} 
		public Integer gain_other {get;set;} 
		public Integer net_sales {get;set;} 
		public Integer contributions {get;set;} 
		public Integer gross_special {get;set;} 
		public Integer direct_expenses {get;set;} 
		public Integer net_special {get;set;} 
		public Integer gaming_income {get;set;} 
		public Integer gaming_expenses {get;set;} 
		public Integer gaming_net {get;set;} 
		public Integer gross_sales {get;set;} 
		public Integer cost_goods {get;set;} 
		public Integer gross_profit {get;set;} 
		public Integer revenue_other {get;set;} 
		public Integer revenue_total {get;set;} 
		public String service_description_a {get;set;} 
		public Integer service_code_a {get;set;} 
		public String service_description_b {get;set;} 
		public Integer service_amount_a {get;set;} 
		public Integer service_code_b {get;set;} 
		public Integer service_amount_b {get;set;} 
		public String service_description_c {get;set;} 
		public Integer service_code_c {get;set;} 
		public Integer service_amount_c {get;set;} 
		public String service_description_d {get;set;} 
		public Integer service_code_d {get;set;} 
		public Integer service_amount_d {get;set;} 
		public String service_description_e {get;set;} 
		public Integer service_code_e {get;set;} 
		public Integer service_amount_e {get;set;} 
		public String service_description_f {get;set;} 
		public Integer service_code_f {get;set;} 
		public Integer service_amount_f {get;set;} 

		public Part_8_revenue(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'federated_campaigns') {
							federated_campaigns = parser.getIntegerValue();
						} else if (text == 'membership_dues') {
							membership_dues = parser.getIntegerValue();
						} else if (text == 'fundraising_events') {
							fundraising_events = parser.getIntegerValue();
						} else if (text == 'related_orgs') {
							related_orgs = parser.getIntegerValue();
						} else if (text == 'government_grants') {
							government_grants = parser.getIntegerValue();
						} else if (text == 'contributions_other') {
							contributions_other = parser.getIntegerValue();
						} else if (text == 'contributions_noncash') {
							contributions_noncash = parser.getIntegerValue();
						} else if (text == 'contributions_all') {
							contributions_all = parser.getIntegerValue();
						} else if (text == 'service_revenue') {
							service_revenue = parser.getIntegerValue();
						} else if (text == 'income_investment') {
							income_investment = parser.getIntegerValue();
						} else if (text == 'income_bonds') {
							income_bonds = parser.getIntegerValue();
						} else if (text == 'royalties') {
							royalties = parser.getIntegerValue();
						} else if (text == 'rents_real') {
							rents_real = parser.getIntegerValue();
						} else if (text == 'rents_personal') {
							rents_personal = parser.getIntegerValue();
						} else if (text == 'rent_expenses_real') {
							rent_expenses_real = parser.getIntegerValue();
						} else if (text == 'rent_expenses_personal') {
							rent_expenses_personal = parser.getIntegerValue();
						} else if (text == 'rent_income_real') {
							rent_income_real = parser.getIntegerValue();
						} else if (text == 'rent_income_personal') {
							rent_income_personal = parser.getIntegerValue();
						} else if (text == 'net_rental') {
							net_rental = parser.getIntegerValue();
						} else if (text == 'gross_securities') {
							gross_securities = parser.getIntegerValue();
						} else if (text == 'gross_other') {
							gross_other = parser.getIntegerValue();
						} else if (text == 'cost_securities') {
							cost_securities = parser.getIntegerValue();
						} else if (text == 'cost_other') {
							cost_other = parser.getIntegerValue();
						} else if (text == 'gain_securities') {
							gain_securities = parser.getIntegerValue();
						} else if (text == 'gain_other') {
							gain_other = parser.getIntegerValue();
						} else if (text == 'net_sales') {
							net_sales = parser.getIntegerValue();
						} else if (text == 'contributions') {
							contributions = parser.getIntegerValue();
						} else if (text == 'gross_special') {
							gross_special = parser.getIntegerValue();
						} else if (text == 'direct_expenses') {
							direct_expenses = parser.getIntegerValue();
						} else if (text == 'net_special') {
							net_special = parser.getIntegerValue();
						} else if (text == 'gaming_income') {
							gaming_income = parser.getIntegerValue();
						} else if (text == 'gaming_expenses') {
							gaming_expenses = parser.getIntegerValue();
						} else if (text == 'gaming_net') {
							gaming_net = parser.getIntegerValue();
						} else if (text == 'gross_sales') {
							gross_sales = parser.getIntegerValue();
						} else if (text == 'cost_goods') {
							cost_goods = parser.getIntegerValue();
						} else if (text == 'gross_profit') {
							gross_profit = parser.getIntegerValue();
						} else if (text == 'revenue_other') {
							revenue_other = parser.getIntegerValue();
						} else if (text == 'revenue_total') {
							revenue_total = parser.getIntegerValue();
						} else if (text == 'service_description_a') {
							service_description_a = parser.getText();
						} else if (text == 'service_code_a') {
							service_code_a = parser.getIntegerValue();
						} else if (text == 'service_description_b') {
							service_description_b = parser.getText();
						} else if (text == 'service_amount_a') {
							service_amount_a = parser.getIntegerValue();
						} else if (text == 'service_code_b') {
							service_code_b = parser.getIntegerValue();
						} else if (text == 'service_amount_b') {
							service_amount_b = parser.getIntegerValue();
						} else if (text == 'service_description_c') {
							service_description_c = parser.getText();
						} else if (text == 'service_code_c') {
							service_code_c = parser.getIntegerValue();
						} else if (text == 'service_amount_c') {
							service_amount_c = parser.getIntegerValue();
						} else if (text == 'service_description_d') {
							service_description_d = parser.getText();
						} else if (text == 'service_code_d') {
							service_code_d = parser.getIntegerValue();
						} else if (text == 'service_amount_d') {
							service_amount_d = parser.getIntegerValue();
						} else if (text == 'service_description_e') {
							service_description_e = parser.getText();
						} else if (text == 'service_code_e') {
							service_code_e = parser.getIntegerValue();
						} else if (text == 'service_amount_e') {
							service_amount_e = parser.getIntegerValue();
						} else if (text == 'service_description_f') {
							service_description_f = parser.getText();
						} else if (text == 'service_code_f') {
							service_code_f = parser.getIntegerValue();
						} else if (text == 'service_amount_f') {
							service_amount_f = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Part_8_revenue consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Programs_Z {
		public List<Programs> programs {get;set;} 
		public List<Platinum_metrics> platinum_metrics {get;set;} 
		public List<Charting_impact_answers> charting_impact_answers {get;set;} 

		public Programs_Z(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'programs') {
							programs = arrayOfPrograms(parser);
						} else if (text == 'platinum_metrics') {
							platinum_metrics = arrayOfPlatinum_metrics(parser);
						} else if (text == 'charting_impact_answers') {
							charting_impact_answers = arrayOfCharting_impact_answers(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Programs_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Data {
		public Summary summary {get;set;} 
		public Programs_Z programs {get;set;} 
		public Financials financials {get;set;} 
		public Operations operations {get;set;} 
		public Charitycheck charitycheck {get;set;} 

		public Data(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'summary') {
							summary = new Summary(parser);
						} else if (text == 'programs') {
							programs = new Programs_Z(parser);
						} else if (text == 'financials') {
							financials = new Financials(parser);
						} else if (text == 'operations') {
							operations = new Operations(parser);
						} else if (text == 'charitycheck') {
							charitycheck = new Charitycheck(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Data consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Org_does_not_collect_for {

		public Org_does_not_collect_for(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						{
							System.debug(LoggingLevel.WARN, 'Org_does_not_collect_for consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Most_recent_year_financials {
		public String period_begin {get;set;} 
		public String period_end {get;set;} 
		public Integer fiscal_year {get;set;} 
		public String form_type {get;set;} 
		public String data_source {get;set;} 
		public Double assets_total {get;set;} 
		public Double total_liabilities {get;set;} 
		public Double revenue_contributions {get;set;} 
		public Double revenue_govt_grants {get;set;} 
		public Double revenue_program_services {get;set;} 
		public Double revenue_investments {get;set;} 
		public Double revenue_special_events {get;set;} 
		public Double revenue_sales {get;set;} 
		public Double revenue_other {get;set;} 
		public Double total_revenue {get;set;} 
		public Double expense_administration {get;set;} 
		public Double expense_program_services {get;set;} 
		public Double expense_fundraising {get;set;} 
		public Double expense_accounting {get;set;} 
		public Double expense_advertising_promotion {get;set;} 
		public Double expense_info_technology {get;set;} 
		public Double expense_insurance {get;set;} 
		public Double expense_interest {get;set;} 
		public Double expense_investment_management {get;set;} 
		public Double expense_legal {get;set;} 
		public Double expense_pension_plan {get;set;} 
		public Double expense_professional_fundraising {get;set;} 
		public Double unrestricted_net_assets {get;set;} 
		public Double net_fixed_assets_LBE {get;set;} 
		public Double notes_payable_mortgages {get;set;} 
		public String months_of_cash {get;set;} 
		public Double expense_professional_fees {get;set;} 
		public Double expense_publications {get;set;} 
		public Double expense_operating_admin {get;set;} 
		public Double expense_gifts_grants_paid {get;set;} 
		public Double total_expense_disbursements {get;set;} 
		public Double expenses_total {get;set;} 
		public Double net_gain_loss {get;set;} 
		public Double expense_salaries_employee_benefits {get;set;} 
		public Double cash_and_equivalent_assets {get;set;} 
		public Double investments_us_government {get;set;} 
		public Double investments_stock {get;set;} 
		public Double investments_bonds {get;set;} 
		public Double investments_other {get;set;} 
		public Double land_buildings_equipment {get;set;} 
		public Double other_assets {get;set;} 

		public Most_recent_year_financials(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'period_begin') {
							period_begin = parser.getText();
						} else if (text == 'period_end') {
							period_end = parser.getText();
						} else if (text == 'fiscal_year') {
							fiscal_year = parser.getIntegerValue();
						} else if (text == 'form_type') {
							form_type = parser.getText();
						} else if (text == 'data_source') {
							data_source = parser.getText();
						} else if (text == 'assets_total') {
                            system.debug('@@@::2:::');
							assets_total = parser.getDoubleValue();
						} else if (text == 'total_liabilities') {
							total_liabilities = parser.getDoubleValue();
						} else if (text == 'revenue_contributions') {
							revenue_contributions = parser.getDoubleValue();
						} else if (text == 'revenue_govt_grants') {
							revenue_govt_grants = parser.getDoubleValue();
						} else if (text == 'revenue_program_services') {
							revenue_program_services = parser.getDoubleValue();
						} else if (text == 'revenue_investments') {
							revenue_investments = parser.getDoubleValue();
						} else if (text == 'revenue_special_events') {
							revenue_special_events = parser.getDoubleValue();
						} else if (text == 'revenue_sales') {
							revenue_sales = parser.getDoubleValue();
						} else if (text == 'revenue_other') {
							revenue_other = parser.getDoubleValue();
						} else if (text == 'total_revenue') {
							total_revenue = parser.getDoubleValue();
						} else if (text == 'expense_administration') {
							expense_administration = parser.getDoubleValue();
						} else if (text == 'expense_program_services') {
							expense_program_services = parser.getDoubleValue();
						} else if (text == 'expense_fundraising') {
							expense_fundraising = parser.getDoubleValue();
						} else if (text == 'expense_accounting') {
							expense_accounting = parser.getDoubleValue();
						} else if (text == 'expense_advertising_promotion') {
							expense_advertising_promotion = parser.getDoubleValue();
						} else if (text == 'expense_info_technology') {
							expense_info_technology = parser.getDoubleValue();
						} else if (text == 'expense_insurance') {
							expense_insurance = parser.getDoubleValue();
						} else if (text == 'expense_interest') {
							expense_interest = parser.getDoubleValue();
						} else if (text == 'expense_investment_management') {
							expense_investment_management = parser.getDoubleValue();
						} else if (text == 'expense_legal') {
							expense_legal = parser.getDoubleValue();
						} else if (text == 'expense_pension_plan') {
							expense_pension_plan = parser.getDoubleValue();
						} else if (text == 'expense_professional_fundraising') {
							expense_professional_fundraising = parser.getDoubleValue();
						} else if (text == 'unrestricted_net_assets') {
							unrestricted_net_assets = parser.getDoubleValue();
						} else if (text == 'net_fixed_assets_LBE') {
							net_fixed_assets_LBE = parser.getDoubleValue();
						} else if (text == 'notes_payable_mortgages') {
							notes_payable_mortgages = parser.getDoubleValue();
						} else if (text == 'months_of_cash') {
							months_of_cash = parser.getText(); 
						} else if (text == 'expense_professional_fees') {
							expense_professional_fees = parser.getDoubleValue();
						} else if (text == 'expense_publications') {
							expense_publications = parser.getDoubleValue();
						} else if (text == 'expense_operating_admin') {
							expense_operating_admin = parser.getDoubleValue();
						} else if (text == 'expense_gifts_grants_paid') {
							expense_gifts_grants_paid = parser.getDoubleValue();
						} else if (text == 'total_expense_disbursements') {
							total_expense_disbursements = parser.getDoubleValue();
						} else if (text == 'expenses_total') {
							expenses_total = parser.getDoubleValue();
						} else if (text == 'net_gain_loss') {
							net_gain_loss = parser.getDoubleValue();
						} else if (text == 'expense_salaries_employee_benefits') {
							expense_salaries_employee_benefits = parser.getDoubleValue();
						} else if (text == 'cash_and_equivalent_assets') {
							cash_and_equivalent_assets = parser.getDoubleValue();
						} else if (text == 'investments_us_government') {
							investments_us_government = parser.getDoubleValue();
						} else if (text == 'investments_stock') {
							investments_stock = parser.getDoubleValue();
						} else if (text == 'investments_bonds') {
							investments_bonds = parser.getDoubleValue();
						} else if (text == 'investments_other') {
							investments_other = parser.getDoubleValue();
						} else if (text == 'land_buildings_equipment') {
							land_buildings_equipment = parser.getDoubleValue();
						} else if (text == 'other_assets') {
							other_assets = parser.getDoubleValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Most_recent_year_financials consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Other_documents {
		public String document_name {get;set;} 
		public String document_year {get;set;} 
		public String otherdocument_contents {get;set;} 
		public String document_url {get;set;} 

		public Other_documents(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'document_name') {
							document_name = parser.getText();
						} else if (text == 'document_year') {
							document_year = parser.getText();
						} else if (text == 'otherdocument_contents') {
							otherdocument_contents = parser.getText();
						} else if (text == 'document_url') {
							document_url = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Other_documents consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Part_10_balance_sheet {
		public Integer cash_boy {get;set;} 
		public Integer cash_eoy {get;set;} 
		public Integer savings_boy {get;set;} 
		public Integer savings_eoy {get;set;} 
		public Integer pledges_grants_boy {get;set;} 
		public Integer pledges_grants_eoy {get;set;} 
		public Integer accounts_receivable_boy {get;set;} 
		public Integer accounts_receivable_eoy {get;set;} 
		public Integer qualified_receivable_boy {get;set;} 
		public Integer qualified_receivable_eoy {get;set;} 
		public Integer disqualified_receivable_boy {get;set;} 
		public Integer disqualified_receivable_eoy {get;set;} 
		public Integer loans_receivable_boy {get;set;} 
		public Integer loans_receivable_eoy {get;set;} 
		public Integer inventory_boy {get;set;} 
		public Integer inventory_eoy {get;set;} 
		public Integer prepaid_boy {get;set;} 
		public Integer prepaid_eoy {get;set;} 
		public Integer lbe_base {get;set;} 
		public Integer less_depreciation {get;set;} 
		public Integer lbe_boy {get;set;} 
		public Integer lbe_eoy {get;set;} 
		public Integer public_securities_boy {get;set;} 
		public Integer public_securities_eoy {get;set;} 
		public Integer other_securities_boy {get;set;} 
		public Integer other_securities_eoy {get;set;} 
		public Integer investment_programs_boy {get;set;} 
		public Integer investment_programs_eoy {get;set;} 
		public Integer intangible_assets_boy {get;set;} 
		public Integer intangible_assets_eoy {get;set;} 
		public Integer other_assets_boy {get;set;} 
		public Integer other_assets_eoy {get;set;} 
		public Integer assets_total_boy {get;set;} 
		public Integer assets_total_eoy {get;set;} 
		public Integer accounts_payable_boy {get;set;} 
		public Integer accounts_payable_eoy {get;set;} 
		public Integer grants_payable_boy {get;set;} 
		public Integer grants_payable_eoy {get;set;} 
		public Integer deferred_revenue_boy {get;set;} 
		public Integer deferred_revenue_eoy {get;set;} 
		public Integer tax_exempt_bonds_boy {get;set;} 
		public Integer tax_exempt_bonds_eoy {get;set;} 
		public Integer escrow_liability_boy {get;set;} 
		public Integer escrow_liability_eoy {get;set;} 
		public Integer payable_officiers_boy {get;set;} 
		public Integer payable_officiers_eoy {get;set;} 
		public Integer secured_notes_payable_boy {get;set;} 
		public Integer secured_notes_payable_eoy {get;set;} 
		public Integer unsecured_notes_payable_boy {get;set;} 
		public Integer unsecured_notes_payable_eoy {get;set;} 
		public Integer liability_other_boy {get;set;} 
		public Integer liability_other_eoy {get;set;} 
		public Integer liability_total_boy {get;set;} 
		public Integer liability_total_eoy {get;set;} 
		public Integer unrestricted_boy {get;set;} 
		public Integer unrestricted_eoy {get;set;} 
		public Integer temporarily_restricted_boy {get;set;} 
		public Integer temporarily_restricted_eoy {get;set;} 
		public Integer permanently_restricted_boy {get;set;} 
		public Integer permanently_restricted_eoy {get;set;} 
		public Integer capital_boy {get;set;} 
		public Integer capital_eoy {get;set;} 
		public Integer paid_in_boy {get;set;} 
		public Integer paid_in_eoy {get;set;} 
		public Integer retained_boy {get;set;} 
		public Integer retained_eoy {get;set;} 
		public Integer net_total_boy {get;set;} 
		public Integer net_total_eoy {get;set;} 
		public Integer balances_boy {get;set;} 
		public Integer balances_eoy {get;set;} 

		public Part_10_balance_sheet(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'cash_boy') {
							cash_boy = parser.getIntegerValue();
						} else if (text == 'cash_eoy') {
							cash_eoy = parser.getIntegerValue();
						} else if (text == 'savings_boy') {
							savings_boy = parser.getIntegerValue();
						} else if (text == 'savings_eoy') {
							savings_eoy = parser.getIntegerValue();
						} else if (text == 'pledges_grants_boy') {
							pledges_grants_boy = parser.getIntegerValue();
						} else if (text == 'pledges_grants_eoy') {
							pledges_grants_eoy = parser.getIntegerValue();
						} else if (text == 'accounts_receivable_boy') {
							accounts_receivable_boy = parser.getIntegerValue();
						} else if (text == 'accounts_receivable_eoy') {
							accounts_receivable_eoy = parser.getIntegerValue();
						} else if (text == 'qualified_receivable_boy') {
							qualified_receivable_boy = parser.getIntegerValue();
						} else if (text == 'qualified_receivable_eoy') {
							qualified_receivable_eoy = parser.getIntegerValue();
						} else if (text == 'disqualified_receivable_boy') {
							disqualified_receivable_boy = parser.getIntegerValue();
						} else if (text == 'disqualified_receivable_eoy') {
							disqualified_receivable_eoy = parser.getIntegerValue();
						} else if (text == 'loans_receivable_boy') {
							loans_receivable_boy = parser.getIntegerValue();
						} else if (text == 'loans_receivable_eoy') {
							loans_receivable_eoy = parser.getIntegerValue();
						} else if (text == 'inventory_boy') {
							inventory_boy = parser.getIntegerValue();
						} else if (text == 'inventory_eoy') {
							inventory_eoy = parser.getIntegerValue();
						} else if (text == 'prepaid_boy') {
							prepaid_boy = parser.getIntegerValue();
						} else if (text == 'prepaid_eoy') {
							prepaid_eoy = parser.getIntegerValue();
						} else if (text == 'lbe_base') {
							lbe_base = parser.getIntegerValue();
						} else if (text == 'less_depreciation') {
							less_depreciation = parser.getIntegerValue();
						} else if (text == 'lbe_boy') {
							lbe_boy = parser.getIntegerValue();
						} else if (text == 'lbe_eoy') {
							lbe_eoy = parser.getIntegerValue();
						} else if (text == 'public_securities_boy') {
							public_securities_boy = parser.getIntegerValue();
						} else if (text == 'public_securities_eoy') {
							public_securities_eoy = parser.getIntegerValue();
						} else if (text == 'other_securities_boy') {
							other_securities_boy = parser.getIntegerValue();
						} else if (text == 'other_securities_eoy') {
							other_securities_eoy = parser.getIntegerValue();
						} else if (text == 'investment_programs_boy') {
							investment_programs_boy = parser.getIntegerValue();
						} else if (text == 'investment_programs_eoy') {
							investment_programs_eoy = parser.getIntegerValue();
						} else if (text == 'intangible_assets_boy') {
							intangible_assets_boy = parser.getIntegerValue();
						} else if (text == 'intangible_assets_eoy') {
							intangible_assets_eoy = parser.getIntegerValue();
						} else if (text == 'other_assets_boy') {
							other_assets_boy = parser.getIntegerValue();
						} else if (text == 'other_assets_eoy') {
							other_assets_eoy = parser.getIntegerValue();
						} else if (text == 'assets_total_boy') {
							assets_total_boy = parser.getIntegerValue();
						} else if (text == 'assets_total_eoy') {
							assets_total_eoy = parser.getIntegerValue();
						} else if (text == 'accounts_payable_boy') {
							accounts_payable_boy = parser.getIntegerValue();
						} else if (text == 'accounts_payable_eoy') {
							accounts_payable_eoy = parser.getIntegerValue();
						} else if (text == 'grants_payable_boy') {
							grants_payable_boy = parser.getIntegerValue();
						} else if (text == 'grants_payable_eoy') {
							grants_payable_eoy = parser.getIntegerValue();
						} else if (text == 'deferred_revenue_boy') {
							deferred_revenue_boy = parser.getIntegerValue();
						} else if (text == 'deferred_revenue_eoy') {
							deferred_revenue_eoy = parser.getIntegerValue();
						} else if (text == 'tax_exempt_bonds_boy') {
							tax_exempt_bonds_boy = parser.getIntegerValue();
						} else if (text == 'tax_exempt_bonds_eoy') {
							tax_exempt_bonds_eoy = parser.getIntegerValue();
						} else if (text == 'escrow_liability_boy') {
							escrow_liability_boy = parser.getIntegerValue();
						} else if (text == 'escrow_liability_eoy') {
							escrow_liability_eoy = parser.getIntegerValue();
						} else if (text == 'payable_officiers_boy') {
							payable_officiers_boy = parser.getIntegerValue();
						} else if (text == 'payable_officiers_eoy') {
							payable_officiers_eoy = parser.getIntegerValue();
						} else if (text == 'secured_notes_payable_boy') {
							secured_notes_payable_boy = parser.getIntegerValue();
						} else if (text == 'secured_notes_payable_eoy') {
							secured_notes_payable_eoy = parser.getIntegerValue();
						} else if (text == 'unsecured_notes_payable_boy') {
							unsecured_notes_payable_boy = parser.getIntegerValue();
						} else if (text == 'unsecured_notes_payable_eoy') {
							unsecured_notes_payable_eoy = parser.getIntegerValue();
						} else if (text == 'liability_other_boy') {
							liability_other_boy = parser.getIntegerValue();
						} else if (text == 'liability_other_eoy') {
							liability_other_eoy = parser.getIntegerValue();
						} else if (text == 'liability_total_boy') {
							liability_total_boy = parser.getIntegerValue();
						} else if (text == 'liability_total_eoy') {
							liability_total_eoy = parser.getIntegerValue();
						} else if (text == 'unrestricted_boy') {
							unrestricted_boy = parser.getIntegerValue();
						} else if (text == 'unrestricted_eoy') {
							unrestricted_eoy = parser.getIntegerValue();
						} else if (text == 'temporarily_restricted_boy') {
							temporarily_restricted_boy = parser.getIntegerValue();
						} else if (text == 'temporarily_restricted_eoy') {
							temporarily_restricted_eoy = parser.getIntegerValue();
						} else if (text == 'permanently_restricted_boy') {
							permanently_restricted_boy = parser.getIntegerValue();
						} else if (text == 'permanently_restricted_eoy') {
							permanently_restricted_eoy = parser.getIntegerValue();
						} else if (text == 'capital_boy') {
							capital_boy = parser.getIntegerValue();
						} else if (text == 'capital_eoy') {
							capital_eoy = parser.getIntegerValue();
						} else if (text == 'paid_in_boy') {
							paid_in_boy = parser.getIntegerValue();
						} else if (text == 'paid_in_eoy') {
							paid_in_eoy = parser.getIntegerValue();
						} else if (text == 'retained_boy') {
							retained_boy = parser.getIntegerValue();
						} else if (text == 'retained_eoy') {
							retained_eoy = parser.getIntegerValue();
						} else if (text == 'net_total_boy') {
							net_total_boy = parser.getIntegerValue();
						} else if (text == 'net_total_eoy') {
							net_total_eoy = parser.getIntegerValue();
						} else if (text == 'balances_boy') {
							balances_boy = parser.getIntegerValue();
						} else if (text == 'balances_eoy') {
							balances_eoy = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Part_10_balance_sheet consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Senior_staff {
		public String name {get;set;} 
		public String title {get;set;} 
		public String experience {get;set;} 

		public Senior_staff(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'name') {
							name = parser.getText();
						} else if (text == 'title') {
							title = parser.getText();
						} else if (text == 'experience') {
							experience = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Senior_staff consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Awards {
		public String awarding_external_org {get;set;} 
		public String award_name {get;set;} 
		public String award_year {get;set;} 

		public Awards(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'awarding_external_org') {
							awarding_external_org = parser.getText();
						} else if (text == 'award_name') {
							award_name = parser.getText();
						} else if (text == 'award_year') {
							award_year = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Awards consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Organization_types {
		public String organization_type {get;set;} 
		public String deductibility_limitation {get;set;} 
		public String deductibility_status_description {get;set;} 

		public Organization_types(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'organization_type') {
							organization_type = parser.getText();
						} else if (text == 'deductibility_limitation') {
							deductibility_limitation = parser.getText();
						} else if (text == 'deductibility_status_description') {
							deductibility_status_description = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Organization_types consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Summary {
		public Integer organization_id {get;set;} 
		public String organization_name {get;set;} 
		public String ein {get;set;} 
		public String bridge_id {get;set;} 
		public String address_line_1 {get;set;} 
		public String address_line_2 {get;set;} 
		public String city {get;set;} 
		public String state {get;set;} 
		public String zip {get;set;} 
		public String county {get;set;} 
		public String latitude {get;set;} 
		public String longitude {get;set;} 
		public String fax {get;set;} 
		public String govt_registered_name {get;set;} 
		public String also_known_as {get;set;} 
		public String fiscal_year_end {get;set;} 
		public String fiscal_year_start {get;set;} 
		public String affiliation_code {get;set;} 
		public String affiliation_description {get;set;} 
		public String contact_name {get;set;} 
		public String contact_title {get;set;} 
		public String contact_email {get;set;} 
		public String contact_phone {get;set;} 
		public String contact_fax {get;set;} 
		public String gs_profile_update_level {get;set;} 
		public String gs_profile_update_level_logo {get;set;} 
		public String deductibility_code {get;set;} 
		public String deductibility_description {get;set;} 
		public String donation_to_ein {get;set;} 
		public String donation_to_name {get;set;} 
		public String areas_served_narrative {get;set;} 
		public String ruling_year {get;set;} 
		public String gs_public_report {get;set;} 
		public String gs_pro_pdf {get;set;} 
		public String gs_financial_trends_analysis_pdf {get;set;} 
		public String impact_statement {get;set;} 
		public String subsection_code {get;set;} 
		public String subsection_description {get;set;} 
		public String keywords {get;set;} 
		public String logo_url {get;set;} 
		public String mission {get;set;} 
		public Boolean is_national_hq {get;set;} 
		public String ntee_code {get;set;} 
		public Sdg sdg {get;set;} 
		public String website_url {get;set;} 
		public String year_founded {get;set;} 
		public String year_incorporated {get;set;} 
		public Boolean is_non_bmf_org {get;set;} 
		public String first_on_bmf_date {get;set;} 
		public String last_on_bmf_date {get;set;} 
		public Profile_data_change_dates profile_data_change_dates {get;set;} 
		public List<Addresses> addresses {get;set;} 
		public List<Affiliations> affiliations {get;set;} 
		public List<Awards> awards {get;set;} 
		public List<Formerly_known_as> formerly_known_as {get;set;} 
		public List<String> forms_1023_1024 {get;set;} 
		public List<Letters_of_determination> letters_of_determination {get;set;} 
		public List<Letters_of_dissolution> letters_of_dissolution {get;set;} 
		public List<Ntee_codes> ntee_codes {get;set;} 
		public Naics_code naics_code {get;set;} 
		public List<Sic_codes> sic_codes {get;set;} 
		public List<Platinum_evaluation_documents> platinum_evaluation_documents {get;set;} 
		public List<Other_documents> other_documents {get;set;} 
		public List<Photos> photos {get;set;} 
		public List<String> social_media_urls {get;set;} 
		public List<Telephone_numbers> telephone_numbers {get;set;} 
		public List<Videos> videos {get;set;} 
		public Boolean org_collect_feedback {get;set;} 
		public String org_feedback_example {get;set;} 
		public Boolean org_quiz_interest {get;set;} 
		public Boolean org_learn_more {get;set;} 
		public List<Feedback_responses> feedback_responses {get;set;} 
		public List<Pcs_codes> pcs_codes {get;set;} 
		public List<Sdg> profile_sdg_codes {get;set;} 

		public Summary(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'organization_id') {
							organization_id = parser.getIntegerValue();
						} else if (text == 'organization_name') {
							organization_name = parser.getText();
						} else if (text == 'ein') {
							ein = parser.getText();
						} else if (text == 'bridge_id') {
							bridge_id = parser.getText();
						} else if (text == 'address_line_1') {
							address_line_1 = parser.getText();
						} else if (text == 'address_line_2') {
							address_line_2 = parser.getText();
						} else if (text == 'city') {
							city = parser.getText();
						} else if (text == 'state') {
							state = parser.getText();
						} else if (text == 'zip') {
							zip = parser.getText();
						} else if (text == 'county') {
							county = parser.getText();
						} else if (text == 'latitude') {
							latitude = parser.getText();
						} else if (text == 'longitude') {
							longitude = parser.getText();
						} else if (text == 'fax') {
							fax = parser.getText();
						} else if (text == 'govt_registered_name') {
							govt_registered_name = parser.getText();
						} else if (text == 'also_known_as') {
							also_known_as = parser.getText();
						} else if (text == 'fiscal_year_end') {
							fiscal_year_end = parser.getText();
						} else if (text == 'fiscal_year_start') {
							fiscal_year_start = parser.getText();
						} else if (text == 'affiliation_code') {
							affiliation_code = parser.getText();
						} else if (text == 'affiliation_description') {
							affiliation_description = parser.getText();
						} else if (text == 'contact_name') {
							contact_name = parser.getText();
						} else if (text == 'contact_title') {
							contact_title = parser.getText();
						} else if (text == 'contact_email') {
							contact_email = parser.getText();
						} else if (text == 'contact_phone') {
							contact_phone = parser.getText();
						} else if (text == 'contact_fax') {
							contact_fax = parser.getText();
						} else if (text == 'gs_profile_update_level') {
							gs_profile_update_level = parser.getText();
						} else if (text == 'gs_profile_update_level_logo') {
							gs_profile_update_level_logo = parser.getText();
						} else if (text == 'deductibility_code') {
							deductibility_code = parser.getText();
						} else if (text == 'deductibility_description') {
							deductibility_description = parser.getText();
						} else if (text == 'donation_to_ein') {
							donation_to_ein = parser.getText();
						} else if (text == 'donation_to_name') {
							donation_to_name = parser.getText();
						} else if (text == 'areas_served_narrative') {
							areas_served_narrative = parser.getText();
						} else if (text == 'ruling_year') {
							ruling_year = parser.getText();
						} else if (text == 'gs_public_report') {
							gs_public_report = parser.getText();
						} else if (text == 'gs_pro_pdf') {
							gs_pro_pdf = parser.getText();
						} else if (text == 'gs_financial_trends_analysis_pdf') {
							gs_financial_trends_analysis_pdf = parser.getText();
						} else if (text == 'impact_statement') {
							impact_statement = parser.getText();
						} else if (text == 'subsection_code') {
							subsection_code = parser.getText();
						} else if (text == 'subsection_description') {
							subsection_description = parser.getText();
						} else if (text == 'keywords') {
							keywords = parser.getText();
						} else if (text == 'logo_url') {
							logo_url = parser.getText();
						} else if (text == 'mission') {
							mission = parser.getText();
						} else if (text == 'is_national_hq') {
							is_national_hq = parser.getBooleanValue();
						} else if (text == 'ntee_code') {
							ntee_code = parser.getText();
						} else if (text == 'sdg') {
							sdg = new Sdg(parser);
						} else if (text == 'website_url') {
							website_url = parser.getText();
						} else if (text == 'year_founded') {
							year_founded = parser.getText();
						} else if (text == 'year_incorporated') {
							year_incorporated = parser.getText();
						} else if (text == 'is_non_bmf_org') {
							is_non_bmf_org = parser.getBooleanValue();
						} else if (text == 'first_on_bmf_date') {
							first_on_bmf_date = parser.getText();
						} else if (text == 'last_on_bmf_date') {
							last_on_bmf_date = parser.getText();
						} else if (text == 'profile_data_change_dates') {
							profile_data_change_dates = new Profile_data_change_dates(parser);
						} else if (text == 'addresses') {
							addresses = arrayOfAddresses(parser);
						} else if (text == 'affiliations') {
							affiliations = arrayOfAffiliations(parser);
						} else if (text == 'awards') {
							awards = arrayOfAwards(parser);
						} else if (text == 'formerly_known_as') {
							formerly_known_as = arrayOfFormerly_known_as(parser);
						} else if (text == 'forms_1023_1024') {
							forms_1023_1024 = arrayOfString(parser);
						} else if (text == 'letters_of_determination') {
							letters_of_determination = arrayOfLetters_of_determination(parser);
						} else if (text == 'letters_of_dissolution') {
							letters_of_dissolution = arrayOfLetters_of_dissolution(parser);
						} else if (text == 'ntee_codes') {
							ntee_codes = arrayOfNtee_codes(parser);
						} else if (text == 'naics_code') {
							naics_code = new Naics_code(parser);
						} else if (text == 'sic_codes') {
							sic_codes = arrayOfSic_codes(parser);
						} else if (text == 'platinum_evaluation_documents') {
							platinum_evaluation_documents = arrayOfPlatinum_evaluation_documents(parser);
						} else if (text == 'other_documents') {
							other_documents = arrayOfOther_documents(parser);
						} else if (text == 'photos') {
							photos = arrayOfPhotos(parser);
						} else if (text == 'social_media_urls') {
							social_media_urls = arrayOfString(parser);
						} else if (text == 'telephone_numbers') {
							telephone_numbers = arrayOfTelephone_numbers(parser);
						} else if (text == 'videos') {
							videos = arrayOfVideos(parser);
						} else if (text == 'org_collect_feedback') {
							org_collect_feedback = parser.getBooleanValue();
						} else if (text == 'org_feedback_example') {
							org_feedback_example = parser.getText();
						} else if (text == 'org_quiz_interest') {
							org_quiz_interest = parser.getBooleanValue();
						} else if (text == 'org_learn_more') {
							org_learn_more = parser.getBooleanValue();
						} else if (text == 'feedback_responses') {
							feedback_responses = arrayOfFeedback_responses(parser);
						} else if (text == 'pcs_codes') {
							pcs_codes = arrayOfPcs_codes(parser);
						} else if (text == 'profile_sdg_codes') {
							profile_sdg_codes = arrayOfSdg(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Summary consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Other_staff {
		public String name {get;set;} 
		public String title {get;set;} 
		public String type_Z {get;set;} // in json: type

		public Other_staff(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'name') {
							name = parser.getText();
						} else if (text == 'title') {
							title = parser.getText();
						} else if (text == 'type') {
							type_Z = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Other_staff consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Funding_needs {
		public String funding_need {get;set;} 
		public String amount_needed {get;set;} 

		public Funding_needs(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'funding_need') {
							funding_need = parser.getText();
						} else if (text == 'amount_needed') {
							amount_needed = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Funding_needs consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Ntee_codes {
		public String ntee_code {get;set;} 
		public String primary_code {get;set;} 
		public String primary_description {get;set;} 
		public String sub_code {get;set;} 
		public String sub_description {get;set;} 

		public Ntee_codes(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'ntee_code') {
							ntee_code = parser.getText();
						} else if (text == 'primary_code') {
							primary_code = parser.getText();
						} else if (text == 'primary_description') {
							primary_description = parser.getText();
						} else if (text == 'sub_code') {
							sub_code = parser.getText();
						} else if (text == 'sub_description') {
							sub_description = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Ntee_codes consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Naics_code {
		public String naics_code {get;set;} 
		public String naics_description {get;set;} 

		public Naics_code(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'naics_code') {
							naics_code = parser.getText();
						} else if (text == 'naics_description') {
							naics_description = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Naics_code consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	
	public static JSON2ApexV3 parse(String json) {
        system.debug('@@@ Entered:::');
		//System.JSONParser parser = System.JSON.createParser(json);
        //return new JSON2ApexV3(parser);
        return (JSON2ApexV3) System.JSON.deserialize(json, JSON2ApexV3.class);
	}
	
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	

    private static List<Funding_sources> arrayOfFunding_sources(System.JSONParser p) {
        List<Funding_sources> res = new List<Funding_sources>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Funding_sources(p));
        }
        return res;
    }



    private static List<Accounting_ratios> arrayOfAccounting_ratios(System.JSONParser p) {
        List<Accounting_ratios> res = new List<Accounting_ratios>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Accounting_ratios(p));
        }
        return res;
    }


    private static List<Senior_staff> arrayOfSenior_staff(System.JSONParser p) {
        List<Senior_staff> res = new List<Senior_staff>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Senior_staff(p));
        }
        return res;
    }




    private static List<Letters_of_dissolution> arrayOfLetters_of_dissolution(System.JSONParser p) {
        List<Letters_of_dissolution> res = new List<Letters_of_dissolution>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Letters_of_dissolution(p));
        }
        return res;
    }






    private static List<Annual_reports> arrayOfAnnual_reports(System.JSONParser p) {
        List<Annual_reports> res = new List<Annual_reports>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Annual_reports(p));
        }
        return res;
    }





    private static List<Forms_990T> arrayOfForms_990T(System.JSONParser p) {
        List<Forms_990T> res = new List<Forms_990T>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Forms_990T(p));
        }
        return res;
    }


    private static List<Other_staff> arrayOfOther_staff(System.JSONParser p) {
        List<Other_staff> res = new List<Other_staff>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Other_staff(p));
        }
        return res;
    }





    private static List<Errors> arrayOfErrors(System.JSONParser p) {
        List<Errors> res = new List<Errors>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Errors(p));
        }
        return res;
    }






    private static List<Other_documents> arrayOfOther_documents(System.JSONParser p) {
        List<Other_documents> res = new List<Other_documents>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Other_documents(p));
        }
        return res;
    }


    private static List<Programs> arrayOfPrograms(System.JSONParser p) {
        List<Programs> res = new List<Programs>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Programs(p));
        }
        return res;
    }








    private static List<Platinum_metrics> arrayOfPlatinum_metrics(System.JSONParser p) {
        List<Platinum_metrics> res = new List<Platinum_metrics>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Platinum_metrics(p));
        }
        return res;
    }


    private static List<Board_of_directors> arrayOfBoard_of_directors(System.JSONParser p) {
        List<Board_of_directors> res = new List<Board_of_directors>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Board_of_directors(p));
        }
        return res;
    }



    private static List<Addresses> arrayOfAddresses(System.JSONParser p) {
        List<Addresses> res = new List<Addresses>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Addresses(p));
        }
        return res;
    }




    private static List<Platinum_evaluation_documents> arrayOfPlatinum_evaluation_documents(System.JSONParser p) {
        List<Platinum_evaluation_documents> res = new List<Platinum_evaluation_documents>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Platinum_evaluation_documents(p));
        }
        return res;
    }


    private static List<Affiliations> arrayOfAffiliations(System.JSONParser p) {
        List<Affiliations> res = new List<Affiliations>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Affiliations(p));
        }
        return res;
    }


    private static List<Years> arrayOfYears(System.JSONParser p) {
        List<Years> res = new List<Years>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Years(p));
        }
        return res;
    }


    private static List<Funding_needs> arrayOfFunding_needs(System.JSONParser p) {
        List<Funding_needs> res = new List<Funding_needs>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Funding_needs(p));
        }
        return res;
    }



    private static List<String> arrayOfString(System.JSONParser p) {
        List<String> res = new List<String>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(p.getText());
        }
        return res;
    }




    private static List<F990ez_financials> arrayOfF990ez_financials(System.JSONParser p) {
        List<F990ez_financials> res = new List<F990ez_financials>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new F990ez_financials(p));
        }
        return res;
    }



    private static List<Categories> arrayOfCategories(System.JSONParser p) {
        List<Categories> res = new List<Categories>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Categories(p));
        }
        return res;
    }


    private static List<Categories_Z> arrayOfCategories_Z(System.JSONParser p) {
        List<Categories_Z> res = new List<Categories_Z>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Categories_Z(p));
        }
        return res;
    }



    private static List<Pcs_codes> arrayOfPcs_codes(System.JSONParser p) {
        List<Pcs_codes> res = new List<Pcs_codes>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Pcs_codes(p));
        }
        return res;
    }


    private static List<Parent_organizations> arrayOfParent_organizations(System.JSONParser p) {
        List<Parent_organizations> res = new List<Parent_organizations>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Parent_organizations(p));
        }
        return res;
    }





    private static List<Subcategories> arrayOfSubcategories(System.JSONParser p) {
        List<Subcategories> res = new List<Subcategories>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Subcategories(p));
        }
        return res;
    }




    private static List<Accreditations> arrayOfAccreditations(System.JSONParser p) {
        List<Accreditations> res = new List<Accreditations>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Accreditations(p));
        }
        return res;
    }





    private static List<Financial_documents> arrayOfFinancial_documents(System.JSONParser p) {
        List<Financial_documents> res = new List<Financial_documents>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Financial_documents(p));
        }
        return res;
    }



    private static List<Financial_trends_analysis> arrayOfFinancial_trends_analysis(System.JSONParser p) {
        List<Financial_trends_analysis> res = new List<Financial_trends_analysis>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Financial_trends_analysis(p));
        }
        return res;
    }



    private static List<Formerly_known_as> arrayOfFormerly_known_as(System.JSONParser p) {
        List<Formerly_known_as> res = new List<Formerly_known_as>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Formerly_known_as(p));
        }
        return res;
    }





    private static List<Charting_impact_answers> arrayOfCharting_impact_answers(System.JSONParser p) {
        List<Charting_impact_answers> res = new List<Charting_impact_answers>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Charting_impact_answers(p));
        }
        return res;
    }




    private static List<Pf990_financials> arrayOfPf990_financials(System.JSONParser p) {
        List<Pf990_financials> res = new List<Pf990_financials>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Pf990_financials(p));
        }
        return res;
    }



    private static List<Sic_codes> arrayOfSic_codes(System.JSONParser p) {
        List<Sic_codes> res = new List<Sic_codes>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Sic_codes(p));
        }
        return res;
    }




    private static List<Photos> arrayOfPhotos(System.JSONParser p) {
        List<Photos> res = new List<Photos>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Photos(p));
        }
        return res;
    }








    private static List<Videos> arrayOfVideos(System.JSONParser p) {
        List<Videos> res = new List<Videos>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Videos(p));
        }
        return res;
    }


    private static List<F990_financials> arrayOfF990_financials(System.JSONParser p) {
        List<F990_financials> res = new List<F990_financials>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new F990_financials(p));
        }
        return res;
    }






    private static List<Contractors> arrayOfContractors(System.JSONParser p) {
        List<Contractors> res = new List<Contractors>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Contractors(p));
        }
        return res;
    }


    private static List<Ntee_codes> arrayOfNtee_codes(System.JSONParser p) {
        List<Ntee_codes> res = new List<Ntee_codes>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Ntee_codes(p));
        }
        return res;
    }



    private static List<Feedback_responses> arrayOfFeedback_responses(System.JSONParser p) {
        List<Feedback_responses> res = new List<Feedback_responses>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Feedback_responses(p));
        }
        return res;
    }



    private static List<Staff_levels> arrayOfStaff_levels(System.JSONParser p) {
        List<Staff_levels> res = new List<Staff_levels>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Staff_levels(p));
        }
        return res;
    }


    private static List<Officers_directors_key_employees> arrayOfOfficers_directors_key_employees(System.JSONParser p) {
        List<Officers_directors_key_employees> res = new List<Officers_directors_key_employees>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Officers_directors_key_employees(p));
        }
        return res;
    }






    private static List<Organization_types> arrayOfOrganization_types(System.JSONParser p) {
        List<Organization_types> res = new List<Organization_types>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Organization_types(p));
        }
        return res;
    }






    private static List<Subcategories_Z> arrayOfSubcategories_Z(System.JSONParser p) {
        List<Subcategories_Z> res = new List<Subcategories_Z>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Subcategories_Z(p));
        }
        return res;
    }


    private static List<Sdg> arrayOfSdg(System.JSONParser p) {
        List<Sdg> res = new List<Sdg>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Sdg(p));
        }
        return res;
    }



    private static List<Financial_statements> arrayOfFinancial_statements(System.JSONParser p) {
        List<Financial_statements> res = new List<Financial_statements>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Financial_statements(p));
        }
        return res;
    }



    private static List<Telephone_numbers> arrayOfTelephone_numbers(System.JSONParser p) {
        List<Telephone_numbers> res = new List<Telephone_numbers>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Telephone_numbers(p));
        }
        return res;
    }


    private static List<Letters_of_determination> arrayOfLetters_of_determination(System.JSONParser p) {
        List<Letters_of_determination> res = new List<Letters_of_determination>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Letters_of_determination(p));
        }
        return res;
    }






    private static List<Awards> arrayOfAwards(System.JSONParser p) {
        List<Awards> res = new List<Awards>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Awards(p));
        }
        return res;
    }



}